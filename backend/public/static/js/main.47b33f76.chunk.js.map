{"version":3,"sources":["redux/user/user.actions.type.js","redux/user/user.utils.js","redux/user/user.reducer.js","redux/msg/msg.action.types.js","redux/msg/msg.reducer.js","redux/alert/alert.action.types.js","redux/alert/alert.reducer.js","redux/chat/chat.action.types.js","redux/chat/chat.reducer.js","redux/videocall/videocall.action.types.js","redux/videocall/videocall.reducer.js","redux/appsettings/appsettings.actions.js","redux/appsettings/appsettings.utils.js","redux/appsettings/appsettings.reducer.js","redux/root-reducer.js","redux/store.js","redux/user/user.selectors.js","redux/alert/alert.selectors.js","redux/videocall/videocall.selectors.js","redux/alert/alert.action.creators.js","utils/api.js","redux/chat/chat.action.creators.js","redux/alert/alert.utils.js","redux/user/user.actions.creators.js","redux/msg/msg.actions.creators.js","redux/videocall/videocall.action.creators.js","contexts/SocketProvider.jsx","redux/appsettings/appsettings.selectors.js","contexts/ThemeProvider.jsx","components/UI/Overlay.jsx","components/layout/navbar/NavbarSearch.jsx","redux/chat/chat.selectors.js","hooks/useToggle.js","components/layout/navbar/Myprofile.jsx","components/layout/navbar/ThemeToggler.jsx","components/layout/navbar/Navbar.jsx","components/pages/landing-page/Landing-page.jsx","components/formUI/TextInput.jsx","components/layout/chat-section/Chat-footer.jsx","components/formUI/Dropdown.jsx","components/layout/chat-section/Chat-header.jsx","redux/videocall/videocall.utils.js","redux/msg/msg.selectors.js","redux/msg/msg.utils.js","components/Textmsg.jsx","components/layout/chat-section/Messages-box.jsx","utils/others.js","components/UI/Loader.jsx","components/layout/chat-section/Chatting-section.jsx","components/layout/sidenav/Sidenav-search.jsx","redux/chat/chat.utils.js","components/layout/sidenav/chatlist/Chat.jsx","components/layout/sidenav/chatlist/ChatList.jsx","components/IncomingCallNotify.jsx","components/layout/sidenav/Sidenav.jsx","utils/forms.js","components/pages/Signup.jsx","components/alerts/Alert.jsx","components/alerts/Alerts.jsx","components/pages/Login.jsx","contexts/VideocallProvider.jsx","components/videocall/ChatListInPrompt.jsx","components/videocall/AddToCallPrompt.jsx","components/videocall/chats-and-attendees/ChatsAndAttendeesNav.jsx","components/videocall/chats-and-attendees/VideocallMsg.jsx","components/videocall/chats-and-attendees/NewMsgForm.jsx","components/videocall/chats-and-attendees/Msg-section.jsx","components/videocall/chats-and-attendees/Attendees.jsx","components/videocall/chats-and-attendees/ChatsAndAttendees.jsx","components/videocall/call-section/AllParticpantsInCall.jsx","components/videocall/call-section/PeerToPeerCall.jsx","components/videocall/call-section/CallOptions.jsx","components/videocall/call-section/CallControls.jsx","components/videocall/call-section/CallMoreOptions.jsx","components/videocall/call-section/CallFooter.jsx","components/videocall/call-section/Call-section.jsx","components/videocall/VideoCall.jsx","App.js","index.js"],"names":["SET_USER","LOAD_USER","AUTH_ERROR","RESET_USER","LOGOUT_USER","CHANGE_PROFILE_PHOTO","saveUserInStorage","user","localStorage","setItem","JSON","stringify","saveTokenInStorage","token","getTokenInStorage","parse","getItem","_","INITIAL_STATE","currentUser","twilioAccessToken","isLoggedIn","isLoading","userReducer","state","action","type","payload","userUtils","photo","fileName","removeItem","FETCH_CHAT_MSGS","ADD_NEW_MSG","MARK_MSGS_AS_READ","RESET_MSGS","initialState","messages","msgReducer","actionTypes","chatId","msgs","length","id","msg","msgIdsArr","chId","console","log","map","includes","_id","isRead","ADD_ALERT","REMOVE_ALERT","alerts","alertReducer","alert","filter","SET_CHATS","SOMEONE_IS_TYPING","SET_CHAT_MSGS_LOADING","ADD_CHAT","DELETE_CHAT","RESET_CHATS","initState","chats","chatReducer","chat","isOnline","isTyping","isLoadingMsgs","RING","STOP_RINGING","START_CALL","SET_RTC_OFFER","SET_RTC_ANSWER","SET_RTC_CANDIDATE","ACCEPT_CALL","CALL_CONNECTED","CALL_DISCONNECTED","ADD_VIDEOCALL_MSG","ZOOM_TO_FULLSCREEN","EXIT_FULLSCREEN","SET_IS_ADDING_NEW_PEER_TO_CALL","END_CALL","call","caller","callingWho","roomId","offer","answer","candidate","chatMsgs","isMuted","videoStopped","isConnected","callEnded","isRinging","isOnCall","isFullscreen","isAddingNewPeerToCall","videocallReducer","videocallActions","boolVal","TOGGLE_APP_THEME","reverseTheme","theme","saveSettings","settings","getSavedSettings","combineReducers","videocall","appsettings","newTheme","middlewares","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","selectUser","selectCurrentUser","createSelector","selectAllAlerts","actualCall","selectIsRinging","selectCallConnected","selectIsOnVideoCall","selectRtcOffer","selectRtcCandidate","selectCaller","selectCallingWho","selectVideoChatMsgs","callAccepted","selectCallEnded","selectIsFullscreen","selectIsAddingToCall","selectVideoChatRoomId","addAlert","removeAlert","flashAlert","timeout","dispatch","setTimeout","makeRequest","url","requestType","body","headers","fetch","method","then","response","json","catch","err","API","username","password","email","authToken","Authorization","queryStr","userId","form","setChats","setChatMsgsLoading","AlertConstructor","text","this","setUser","authError","handleAuthSuccess","res","data","newAlert","uuidv4","friends","handleAuthFailure","message","handleAuthError","authenticate","authStyle","formData","a","utils","resStatus","status","addFetchedChatMsgs","addNewMsg","setIsAddingNewPeerToCall","socket","io","connect","socketEmitPrivateMsgOut","from","receiver","sendTo","sentAt","emit","sender","createdAt","onAny","evt","args","on","newMsg","typist","setSomeoneIsTyping","onlineStatus","callDetails","ring","socketContext","createContext","SocketProvider","props","Provider","value","children","selectAppTheme","themeContext","mapStateToProps","createStructuredSelector","appTheme","toggleTheme","Overlay","isVisible","showIf","transparent","restProps","className","useState","searchQuery","setSearchQuery","searchResults","setSearchResults","suggestionsShown","setSuggestionsShown","darkTheme","useContext","searchPeople","query","users","handleClickAddBtn","addUserAsFriend","addedUser","placeholder","onChange","ev","target","onFocus","src","alt","onClick","selectChats","selectTotalChatCount","selectIsLoadingChatMsgs","find","selectCallerInChat","useToggle","setState","toggle","reset","totalChatCount","changeProfilePhoto","logOutUser","showFullProfile","toggleShowFullProfile","handleFileChosen","chosenFile","files","FormData","append","updateUser","accept","htmlFor","ThemeToggler","data-status","to","class","data-icon","TextInput","onFocusOut","onBlur","allChats","withRouter","setNewMsg","currentChat","useParams","useEffect","Boolean","sendMessage","preventDefault","Date","onSubmit","Dropdown","isVisble","listItems","ownProps","match","params","currentChatId","chatPhotoZoomedIn","setChatPhotoZoomedIn","optionsShown","setOptionsShown","data-label","callerId","startVideoCall","selectMsg","selectAllMsgs","selectUnreadMsgsSentByChat","dateTimeFormat","timestamp","options","Intl","DateTimeFormat","window","navigator","language","format","getMsgSentTime","date1","formatOptions","hour","hour12","minute","numDaysPassed","Math","round","getTime","join","weekday","day","month","direction","MessagesBox","allMsgs","unreadMsgs","markMsgsAsRead","isLoadingChatMsgs","fetchChatMsgs","m","actionCreators","msgActions","msgIds","React","memo","getEmptyFields","dataObject","Object","keys","key","LoadingSpinner","str","size","loaderRef","useRef","ref","toUpperCase","slice","toLowerCase","Fragment","history","setQuery","showResults","setShowResults","startsWith","searchChatByQuery","mapState","allReduxMsgs","lastChatMsg","pop","showLastMsgAsUnread","unreadMsgsCount","reduce","accum","activeClassName","ch","rtcOffer","callerInChat","videocallRoomId","callerUsername","flashAlertsForEmptyFields","fieldsArr","field","forEach","i","signupData","setSignupData","onChangeData","name","emptyFields","otherUtils","formUtils","autoComplete","alertActions","Alerts","loginData","setLoginData","videoCallContext","VideoCallProvider","videoCallSession","setVideoCallSession","session","setSession","ChatListInPrompt","hidePrompt","ChatsAndAttendeesNav","isViewingAttendees","setIsViewingAttendees","data-nav-item","sentByMe","videoChatRoom","newTextMsg","setNewTextMsg","sendNewMsg","room","videoChatMsgs","Attendees","ChatsAndAttendees","AllParticpantsInCall","videoChatRoomId","rtcCandidate","callConnected","localVideoRef","remoteVideoRef","localStream","setLocalStream","MediaStream","remoteStream","setRemoteStream","PeerConnection","isInitiator","stream","_iceConfig","iceServers","urls","connectStreamToVideo","current","srcObject","addOwnTracks","getTracks","track","connection","addTrack","handleNegotiationNeeded","createOffer","setLocalDescription","handleIceCandidate","handleIncomingCandidate","addIceCandidate","RTCIceCandidate","handleIceConnectionStateChange","iceConnectionState","closeVideoCall","handleConnectionStateChange","connectionState","handleTrackEvent","streams","handleRemoveTrack","handleIceGatheringStateChange","handleSignalingStateChange","handleCloseVideoCall","RTCPeerConnection","init","onnegotiationneeded","onicecandidate","ontrack","onremovetrack","oniceconnectionstatechange","onconnectionstatechange","onicegatheringstatechange","onsignalingstatechange","PeerInitiator","handleCallAnswered","setRemoteDescription","RTCSessionDescription","JoiningPeer","handleIncomingRtcOffer","createRtcAnswer","createAnswer","getUserMediaStream","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","bind","Promise","resolve","reject","audio","video","makeCall","peerConn","joinCall","autoPlay","muted","CallFooter","CallSection","isOnVideoCall","isAddingToCall","otherProps","HelomiDefaultImg","authenticateToken","exact","path","component","LandingPage","Login","Signup","render","routeProps","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.47b33f76.chunk.js","sourcesContent":["export const SET_USER = 'SET_USER';\r\nexport const LOAD_USER = 'LOAD_USER';\r\nexport const REGISTER_USER = 'REGISTER_USER';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\nexport const RESET_USER = 'RESET_USER';\r\nexport const LOGOUT_USER = 'LOGOUT_USER';\r\nexport const USER_LOADED = 'USER_LOADED';\r\nexport const CHANGE_PROFILE_PHOTO = 'CHANGE_PROFILE_PHOTO';\r\n","export function saveUserInStorage(user) {\r\n   localStorage.setItem('HELOMI_USER', JSON.stringify(user));\r\n}\r\n\r\nexport function saveTokenInStorage(token) {\r\n   localStorage.setItem('HELOMI_USER_TOKEN', JSON.stringify(token));\r\n}\r\n\r\nexport function getUserInStorage() {\r\n   try {\r\n      const user = JSON.parse(localStorage.setItem('HELOMI_USER'));\r\n      return user;\r\n   } catch (_) {\r\n      return null;\r\n   }\r\n}\r\n\r\nexport function getTokenInStorage() {\r\n   try {\r\n      const token = JSON.parse(localStorage.getItem('HELOMI_USER_TOKEN'));\r\n      return token;\r\n   } catch (_) {\r\n      return null;\r\n   }\r\n}\r\n","import {\r\n   SET_USER,\r\n   LOAD_USER,\r\n   AUTH_ERROR,\r\n   RESET_USER,\r\n   LOGOUT_USER,\r\n   CHANGE_PROFILE_PHOTO\r\n} from './user.actions.type';\r\nimport * as userUtils from './user.utils';\r\n\r\nconst INITIAL_STATE = {\r\n   currentUser: null,\r\n   token: '',\r\n   twilioAccessToken: '',\r\n   isLoggedIn: false,\r\n   isLoading: true\r\n};\r\n\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n   const { type, payload } = action;\r\n   switch (type) {\r\n      case LOAD_USER:\r\n         return {\r\n            ...state\r\n         };\r\n\r\n      case SET_USER:\r\n         userUtils.saveUserInStorage(payload.user);\r\n         userUtils.saveTokenInStorage(payload.token);\r\n         return {\r\n            ...state,\r\n            currentUser: payload.user,\r\n            token: payload.token,\r\n            twilioAccessToken: payload.twilioAccessToken,\r\n            isLoggedIn: true,\r\n            isLoading: false\r\n         };\r\n      case CHANGE_PROFILE_PHOTO:\r\n         return {\r\n            ...state,\r\n            currentUser: {\r\n               ...state.currentUser,\r\n               photo: payload.fileName\r\n            }\r\n         };\r\n\r\n      case AUTH_ERROR:\r\n      case RESET_USER:\r\n      case LOGOUT_USER:\r\n         localStorage.removeItem('HELOMI_USER');\r\n         localStorage.removeItem('HELOMI_USER_TOKEN');\r\n         return {\r\n            currentUser: null,\r\n            token: '',\r\n            isLoggedIn: false,\r\n            isLoading: false\r\n         };\r\n\r\n      default:\r\n         return state;\r\n   }\r\n};\r\n\r\nexport default userReducer;\r\n","export const FETCH_CHAT_MSGS = 'FETCH_CHAT_MSGS';\r\nexport const ADD_NEW_MSG = 'ADD_NEW_MSG';\r\nexport const MARK_MSGS_AS_READ = 'MARK_MSGS_AS_READ';\r\nexport const RESET_MSGS = 'RESET_MSGS';\r\n","// prettier-ignore\r\nimport * as actionTypes from './msg.action.types';\r\n\r\nconst initialState = {\r\n   messages: {}\r\n};\r\n\r\nconst msgReducer = (state = initialState, action) => {\r\n   const { type, payload } = action;\r\n   switch (type) {\r\n      case actionTypes.FETCH_CHAT_MSGS:\r\n         const { chatId, msgs } = payload;\r\n         return {\r\n            ...state,\r\n            messages: {\r\n               ...state.messages,\r\n               [chatId]: state.messages[chatId]?.length\r\n                  ? [...msgs, ...state.messages[chatId]]\r\n                  : [...msgs]\r\n            }\r\n         };\r\n\r\n      case actionTypes.ADD_NEW_MSG:\r\n         let { chatId: id, msg } = payload;\r\n         return {\r\n            ...state,\r\n            messages: {\r\n               ...state.messages,\r\n               [id]: state.messages[id]?.length\r\n                  ? [...state.messages[id], msg]\r\n                  : [msg]\r\n            }\r\n         };\r\n\r\n      case actionTypes.MARK_MSGS_AS_READ:\r\n         let { msgIdsArr, chatId: chId } = payload;\r\n         console.log(msgIdsArr, state.messages[chId]);\r\n         return {\r\n            ...state,\r\n            messages: {\r\n               ...state.messages,\r\n               [chId]: state.messages[chId].map(msg =>\r\n                  msgIdsArr.includes(msg._id)\r\n                     ? { ...msg, isRead: true }\r\n                     : { ...msg }\r\n               )\r\n            }\r\n         };\r\n\r\n      case actionTypes.RESET_MSGS:\r\n         return {\r\n            messages: {}\r\n         };\r\n\r\n      default:\r\n         return state;\r\n   }\r\n};\r\nexport default msgReducer;\r\n","export const ADD_ALERT = 'ADD_ALERT';\r\nexport const REMOVE_ALERT = 'REMOVE_ALERT';\r\n","import { ADD_ALERT, REMOVE_ALERT } from './alert.action.types';\r\n\r\nconst INITIAL_STATE = {\r\n   alerts: []\r\n};\r\n\r\nconst alertReducer = (state = INITIAL_STATE, { type, payload }) => {\r\n   switch (type) {\r\n      case ADD_ALERT:\r\n         return { alerts: [payload.alert, ...state.alerts] };\r\n\r\n      case REMOVE_ALERT:\r\n         return {\r\n            alerts: state.alerts.filter(alert => alert.id !== payload.id)\r\n         };\r\n      default:\r\n         return state;\r\n   }\r\n};\r\nexport default alertReducer;\r\n","export const SET_CHATS = 'SET_CHATS';\r\nexport const SOMEONE_IS_TYPING = 'SOMEONE_IS_TYPING';\r\nexport const SET_CHAT_MSGS_LOADING = 'SET_CHAT_MSGS_LOADING';\r\nexport const ADD_CHAT = 'ADD_CHAT';\r\nexport const DELETE_CHAT = 'DELETE_CHAT';\r\nexport const RESET_CHATS = 'RESET_CHATS';\r\n","import * as actionTypes from './chat.action.types';\r\n\r\nconst initState = {\r\n   chats: []\r\n};\r\n\r\nconst chatReducer = (state = initState, action) => {\r\n   const { type, payload } = action;\r\n   switch (type) {\r\n      case actionTypes.SET_CHATS:\r\n         // if (!payload.chats.length)\r\n         //    return {\r\n         //       chats:\r\n         //    }\r\n         return {\r\n            ...state,\r\n            chats: payload.chats.map(chat => ({\r\n               ...chat,\r\n               isOnline: false,\r\n               isTyping: false,\r\n               isLoadingMsgs: true\r\n            }))\r\n         };\r\n\r\n      case actionTypes.SOMEONE_IS_TYPING:\r\n         return {\r\n            ...state,\r\n            chats: state.chats.map(chat =>\r\n               chat._id === payload.chatId\r\n                  ? { ...chat, isTyping: payload.isTyping }\r\n                  : { ...chat }\r\n            )\r\n         };\r\n\r\n      case actionTypes.SET_CHAT_MSGS_LOADING:\r\n         const { isLoading } = payload;\r\n         return {\r\n            ...state,\r\n            chats: state.chats.map(chat =>\r\n               chat._id === payload.chatId\r\n                  ? { ...chat, isLoadingMsgs: isLoading }\r\n                  : { ...chat }\r\n            )\r\n         };\r\n\r\n      case actionTypes.ADD_CHAT:\r\n         return {\r\n            ...state,\r\n            chats: [\r\n               ...state.chats,\r\n               { ...payload.chat, isTyping: false, isLoadingMsgs: true }\r\n            ]\r\n         };\r\n\r\n      case actionTypes.DELETE_CHAT:\r\n         return {\r\n            ...state,\r\n            chats: state.chats.filter(chat => chat._id !== payload.chatId)\r\n         };\r\n      case actionTypes.RESET_CHATS:\r\n         return {\r\n            chats: {}\r\n         };\r\n\r\n      default:\r\n         return state;\r\n   }\r\n};\r\n\r\nexport default chatReducer;\r\n","export const RING = 'RING';\nexport const STOP_RINGING = 'STOP_RINGING';\n\nexport const START_CALL = 'START_CALL';\nexport const SET_VIDEO_CALL_ROOM_ID = 'SET_VIDEO_CALL_ROOM_ID';\nexport const SET_RTC_OFFER = 'SET_RTC_OFFER';\nexport const SET_RTC_ANSWER = 'SET_RTC_ANSWER';\nexport const SET_RTC_CANDIDATE = 'SET_RTC_CANDIDATE';\nexport const ACCEPT_CALL = 'ACCEPT_CALL';\n\nexport const CALL_CONNECTED = 'CALL_CONNECTED';\nexport const CALL_DISCONNECTED = 'CALL_DISCONNECTED';\nexport const ADD_VIDEOCALL_MSG = 'ADD_VIDEOCALL_MSG';\n\nexport const ZOOM_TO_FULLSCREEN = 'ZOOM_TO_FULLSCREEN';\nexport const EXIT_FULLSCREEN = 'EXIT_FULLSCREEN';\nexport const SET_IS_ADDING_NEW_PEER_TO_CALL = 'SET_IS_ADDING_NEW_PEER_TO_CALL';\nexport const END_CALL = 'END_CALL';\nexport const RESET_VIDEOCALL_STATE = 'RESET_VIDEOCALL_STATE';\n","import * as videocallActions from './videocall.action.types';\n\nconst initState = {\n   call: {\n      caller: null,\n      callingWho: null,\n      roomId: null,\n      offer: null,\n      answer: null,\n      candidate: null,\n      chatMsgs: [],\n      isMuted: true,\n      videoStopped: false,\n      isConnected: false,\n      callEnded: true\n   },\n   isRinging: false,\n   isOnCall: false,\n   isFullscreen: false,\n   isAddingNewPeerToCall: false\n};\n\nconst videocallReducer = function (state = initState, action) {\n   const { type, payload } = action;\n   switch (type) {\n      case videocallActions.RING:\n         const { caller, roomId } = payload;\n         return {\n            ...state,\n            call: { ...state.call, caller, roomId },\n            isRinging: true\n         };\n\n      case videocallActions.CALL_CONNECTED:\n         return { ...state, call: { ...state.call, isConnected: true } };\n\n      case videocallActions.CALL_DISCONNECTED:\n         return { ...state, call: { ...state.call, isConnected: false } };\n\n      case videocallActions.STOP_RINGING:\n         return { ...state, isRinging: false };\n\n      case videocallActions.START_CALL:\n         return {\n            ...state,\n            call: {\n               ...state.call,\n               caller: payload.caller,\n               callingWho: payload.callingWho,\n               roomId: payload.roomId\n            },\n            isOnCall: true\n         };\n\n      case videocallActions.SET_RTC_OFFER:\n         return {\n            ...state,\n            call: { ...state.call, offer: payload.offer }\n         };\n\n      case videocallActions.SET_RTC_ANSWER:\n         return {\n            ...state,\n            call: { ...state.call, answer: payload.answer }\n         };\n\n      case videocallActions.SET_RTC_CANDIDATE:\n         return {\n            ...state,\n            call: { ...state.call, candidate: payload.candidate }\n         };\n\n      case videocallActions.ACCEPT_CALL:\n         return { ...state, isOnCall: true };\n\n      case videocallActions.ADD_VIDEOCALL_MSG:\n         return {\n            ...state,\n            call: {\n               ...state.call,\n               chatMsgs: [...state.call.chatMsgs, payload.msg]\n            }\n         };\n\n      case videocallActions.END_CALL:\n         return {\n            call: {\n               caller: null,\n               callingWho: null,\n               roomId: null,\n               offer: null,\n               answer: null,\n               candidate: null,\n               chatMsgs: [],\n               isMuted: true,\n               videoStopped: false,\n               isConnected: false,\n               callEnded: true\n            },\n            isRinging: false,\n            isOnCall: false,\n            isFullscreen: false,\n            isAddingNewPeerToCall: false\n         };\n\n      case videocallActions.ZOOM_TO_FULLSCREEN:\n         return { ...state, isFullscreen: true };\n\n      case videocallActions.EXIT_FULLSCREEN:\n         return { ...state, isFullscreen: false };\n\n      case videocallActions.SET_IS_ADDING_NEW_PEER_TO_CALL:\n         return { ...state, isAddingNewPeerToCall: payload.boolVal };\n\n      default:\n         return state;\n   }\n};\n\nexport default videocallReducer;\n","export const TOGGLE_APP_THEME = 'TOGGLE_APP_THEME';\r\n","export const reverseTheme = theme => (theme === 'light' ? 'dark' : 'light');\r\n\r\nexport const getSavedSettings = () => {\r\n   try {\r\n      const savedSettings = JSON.parse(\r\n         localStorage.getItem('HELOMI_APP_SETTINGS')\r\n      );\r\n      return savedSettings;\r\n   } catch (_) {\r\n      return { theme: 'light' };\r\n   }\r\n};\r\n\r\nexport const saveSettings = settings =>\r\n   localStorage.setItem('HELOMI_APP_SETTINGS', JSON.stringify(settings));\r\n","import { TOGGLE_APP_THEME } from './appsettings.actions';\r\nimport {\r\n   reverseTheme,\r\n   getSavedSettings,\r\n   saveSettings\r\n} from './appsettings.utils';\r\n\r\nconst initState = {\r\n   theme: getSavedSettings()?.theme || 'light'\r\n};\r\n\r\nexport default function (state = initState, action) {\r\n   switch (action.type) {\r\n      case TOGGLE_APP_THEME:\r\n         const newTheme = reverseTheme(state.theme);\r\n\r\n         saveSettings({ ...state, theme: newTheme });\r\n         return { theme: newTheme };\r\n      default:\r\n         return state;\r\n   }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport userReducer from './user/user.reducer';\r\nimport msgReducer from './msg/msg.reducer';\r\nimport alertReducer from './alert/alert.reducer';\r\nimport chatReducer from './chat/chat.reducer';\r\nimport videocallReducer from './videocall/videocall.reducer';\r\nimport appsettingsReducer from './appsettings/appsettings.reducer';\r\n\r\nexport default combineReducers({\r\n   msg: msgReducer,\r\n   user: userReducer,\r\n   alert: alertReducer,\r\n   chat: chatReducer,\r\n   videocall: videocallReducer,\r\n   appsettings: appsettingsReducer\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewares = [thunk];\r\nif (process.env.NODE_ENV === 'development') middlewares.push(logger);\r\n\r\nconst store = createStore(\r\n   rootReducer,\r\n   composeWithDevTools(applyMiddleware(...middlewares))\r\n);\r\n\r\nexport default store;\r\n","import { createSelector } from 'reselect';\r\n\r\nexport const selectUser = state => state.user;\r\nexport const selectCurrentUser = createSelector(\r\n   [selectUser],\r\n   user => user.currentUser\r\n);\r\n","import { createSelector } from 'reselect';\r\n\r\nexport const selectAlert = state => state.alert;\r\nexport const selectAllAlerts = createSelector(\r\n   [selectAlert],\r\n   alert => alert.alerts\r\n);\r\nexport const selectOneAlert = alertId => {\r\n   return createSelector([selectAllAlerts], alerts =>\r\n      alerts.find(a => a.id === alertId)\r\n   );\r\n};\r\n","import { createSelector } from 'reselect';\n\nconst videocall = state => state.videocall;\nconst actualCall = state => state.videocall.call;\n\nexport const selectIsRinging = createSelector(\n   [videocall],\n   videocall => videocall.isRinging\n);\n\nexport const selectCallConnected = createSelector(\n   [actualCall],\n   call => call.isConnected\n);\n\nexport const selectIsOnVideoCall = createSelector(\n   [videocall],\n   videocall => videocall.isOnCall\n);\n\nexport const selectRtcOffer = createSelector([actualCall], call => call.offer);\n\nexport const selectRtcAnswer = createSelector(\n   [actualCall],\n   call => call.answer\n);\n\nexport const selectRtcCandidate = createSelector(\n   [actualCall],\n   call => call.candidate\n);\n\nexport const selectCaller = createSelector([actualCall], call => call.caller);\n\nexport const selectCallingWho = createSelector(\n   [actualCall],\n   call => call.callingWho\n);\n\nexport const selectCallAccepted = createSelector(\n   [videocall],\n   videocall => videocall.callAccepted\n);\n\nexport const selectVideoChatMsgs = createSelector(\n   [actualCall],\n   call => call.chatMsgs\n);\n\nexport const selectCallEnded = createSelector(\n   [actualCall],\n   call => call.callEnded\n)\n\nexport const selectIsFullscreen = createSelector(\n   [videocall],\n   videocall => videocall.isFullscreen\n);\n\nexport const selectIsAddingToCall = createSelector(\n   [videocall],\n   videocall => videocall.isAddingNewPeerToCall\n);\n\nexport const selectVideoChatRoomId = createSelector(\n   [actualCall],\n   call => call.roomId\n);\n","import { ADD_ALERT, REMOVE_ALERT } from './alert.action.types';\r\n\r\nexport const addAlert = alert => ({ type: ADD_ALERT, payload: { alert } });\r\nexport const removeAlert = id => ({ type: REMOVE_ALERT, payload: { id } });\r\n\r\nexport const flashAlert = (alert, timeout = 5000) => {\r\n   return dispatch => {\r\n      setTimeout(() => dispatch(removeAlert(alert.id)), timeout);\r\n      dispatch(addAlert(alert));\r\n   };\r\n};\r\n","const makeRequest = function ({ url, requestType, body, headers }) {\r\n   return fetch(url, { method: requestType, body, headers })\r\n      .then(response => response.json())\r\n      .catch(err => {\r\n         console.log(err);\r\n      });\r\n};\r\n\r\nclass APIRequest {\r\n   signup({ username, password, email }) {\r\n      return makeRequest({\r\n         url: '/users/signup',\r\n         requestType: 'POST',\r\n         body: JSON.stringify({ username, email, password }),\r\n         headers: { 'Content-Type': 'application/json' }\r\n      });\r\n   }\r\n\r\n   login({ username, password }) {\r\n      return makeRequest({\r\n         url: '/users/login',\r\n         requestType: 'POST',\r\n         body: JSON.stringify({ username, password }),\r\n         headers: { 'Content-Type': 'application/json' }\r\n      });\r\n   }\r\n\r\n   fetchChatMsgs(authToken, chatId) {\r\n      return fetch(`/privatemsg/friends/${chatId}/msgs`, {\r\n         method: 'GET',\r\n         headers: { Authorization: `Bearer ${authToken}` }\r\n      });\r\n   }\r\n\r\n   searchPeople(authToken, queryStr) {\r\n      return fetch(`/friends/search-people?username=${queryStr}`, {\r\n         method: 'GET',\r\n         headers: { Authorization: `Bearer ${authToken}` }\r\n      })\r\n         .then(response => response.json())\r\n         .catch(err => err);\r\n   }\r\n\r\n   addUserAsFriend(authToken, userId) {\r\n      return fetch(`/friends/add/${userId}`, {\r\n         method: 'POST',\r\n         headers: { Authorization: `Bearer ${authToken}` }\r\n      })\r\n         .then(response => response.json())\r\n         .catch(err => err);\r\n   }\r\n\r\n   deleteFriend(authToken, chatId) {\r\n      return fetch(`/friends/${chatId}`, {\r\n         method: 'DELETE',\r\n         headers: { Authorization: `Bearer ${authToken}` }\r\n      })\r\n         .then(response => response.json())\r\n         .catch(err => err);\r\n   }\r\n   updateUser(authToken, form) {\r\n      return fetch(`/users/update-my-profile`, {\r\n         method: 'PATCH',\r\n         headers: {\r\n            Authorization: `Bearer ${authToken}`\r\n         },\r\n         body: form\r\n      })\r\n         .then(response => response.json())\r\n         .catch(err => err);\r\n   }\r\n   authenticateToken(authToken) {\r\n      return fetch(`/users/auth`, {\r\n         method: 'GET',\r\n         headers: { Authorization: `Bearer ${authToken}` }\r\n      })\r\n         .then(response => response.json())\r\n         .catch(err => err);\r\n   }\r\n}\r\nexport const API = new APIRequest();\r\n","import { API } from '../../utils/api';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n   SET_CHATS,\r\n   ADD_CHAT,\r\n   SET_CHAT_MSGS_LOADING,\r\n   SOMEONE_IS_TYPING,\r\n   DELETE_CHAT\r\n} from './chat.action.types';\r\nimport { addAlert } from '../alert/alert.action.creators';\r\n\r\nexport const setChats = chats => {\r\n   return dispatch => {\r\n      console.log(chats);\r\n      dispatch({\r\n         type: SET_CHATS,\r\n         payload: { chats }\r\n      });\r\n   };\r\n};\r\n\r\nexport const setSomeoneIsTyping = ({ chatId, isTyping }) => ({\r\n   type: SOMEONE_IS_TYPING,\r\n   payload: { chatId, isTyping }\r\n});\r\n\r\nexport const setChatMsgsLoading = ({ chatId, isLoading }) => ({\r\n   type: SET_CHAT_MSGS_LOADING,\r\n   payload: { chatId, isLoading }\r\n});\r\n\r\nexport const deleteChat = (authToken, chatId) => async dispatch => {\r\n   API.deleteFriend(authToken, chatId);\r\n   dispatch({ type: DELETE_CHAT, payload: { chatId } });\r\n};\r\n\r\nexport const addUserAsFriend = (authToken, userId) => async dispatch => {\r\n   try {\r\n      const response = await API.addUserAsFriend(authToken, userId);\r\n      console.log('Response: ', response);\r\n      const newAlert = { id: uuidv4() };\r\n\r\n      switch (response.status) {\r\n         case 'success':\r\n            console.log(response);\r\n            const addedUser = response.user;\r\n            delete addedUser.friends;\r\n\r\n            dispatch({ type: ADD_CHAT, payload: { chat: addedUser } });\r\n\r\n            newAlert.type = 'success';\r\n            newAlert.text = `${addedUser.username} is now your friend`;\r\n            break;\r\n\r\n         case 'fail':\r\n         case 'error':\r\n            newAlert.type = 'warning';\r\n            newAlert.text =\r\n               response.status === 'fail'\r\n                  ? response.message\r\n                  : \"Couldn't add. Something went wrong\";\r\n            break;\r\n      }\r\n\r\n      dispatch(addAlert(newAlert));\r\n   } catch (err) {\r\n      console.log('In chat creators:', err);\r\n   }\r\n};\r\n","export function AlertConstructor(text, type) {\r\n   this.text = text;\r\n   this.type = type;\r\n}\r\n","import {\r\n   AUTH_ERROR,\r\n   CHANGE_PROFILE_PHOTO,\r\n   LOAD_USER,\r\n   LOGOUT_USER,\r\n   RESET_USER,\r\n   SET_USER\r\n} from './user.actions.type';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { flashAlert } from '../alert/alert.action.creators';\r\nimport { setChats } from '../chat/chat.action.creators';\r\nimport { RESET_CHATS } from '../chat/chat.action.types';\r\nimport { RESET_MSGS } from '../msg/msg.action.types';\r\nimport { AlertConstructor } from '../alert/alert.utils';\r\nimport * as utils from '../../utils/api';\r\nimport * as userUtils from './user.utils';\r\n\r\nexport const setUser = (user = null, token = '', twilioAccessToken) => {\r\n   return { type: SET_USER, payload: { user, token, twilioAccessToken } };\r\n};\r\n\r\nexport const loadUser = () => async dispatch => {\r\n   const token = userUtils.getTokenInStorage();\r\n   const res = await utils.API.authenticateToken(token);\r\n\r\n   if (res.status === 'success') {\r\n      dispatch(setUser(res.user, token, res.twilioAccessToken));\r\n      dispatch(setChats(res.user.friends));\r\n   } else dispatch(authError());\r\n   // console.log('In loadUser, ', res);\r\n};\r\n\r\nexport const authError = () => ({ type: AUTH_ERROR });\r\nexport const resetUser = () => ({ type: RESET_USER });\r\nexport const logOutUser = () => dispatch => {\r\n   dispatch({ type: LOGOUT_USER });\r\n   dispatch({ type: RESET_CHATS });\r\n   dispatch({ type: RESET_MSGS });\r\n};\r\n\r\nexport const changeProfilePhoto = fileName => ({\r\n   type: CHANGE_PROFILE_PHOTO,\r\n   payload: { fileName }\r\n});\r\n\r\nfunction handleAuthSuccess(res, dispatch) {\r\n   const { user } = res.data;\r\n   const { token, twilioAccessToken } = res;\r\n   const newAlert = new AlertConstructor(\r\n      'You have been successfully logged in',\r\n      'success',\r\n      uuidv4()\r\n   );\r\n   dispatch(flashAlert(newAlert));\r\n   dispatch(setUser(user, token, twilioAccessToken));\r\n   dispatch(setChats(user.friends));\r\n}\r\n\r\nfunction handleAuthFailure(res, dispatch) {\r\n   const newAlert = new AlertConstructor(res.message, 'warning', uuidv4());\r\n   dispatch(flashAlert(newAlert));\r\n   dispatch(authError());\r\n}\r\n\r\nfunction handleAuthError(res, dispatch) {\r\n   const newAlert = new AlertConstructor(\r\n      res.message ||\r\n         'Sorry, we could not log you in. Please check your internet connection',\r\n      'warning',\r\n      uuidv4()\r\n   );\r\n   dispatch(flashAlert(newAlert));\r\n   dispatch(authError());\r\n}\r\n\r\nexport const authenticate = (authStyle, formData) => {\r\n   return async dispatch => {\r\n      const res = await utils.API[authStyle](formData);\r\n      // console.log(res);\r\n      const resStatus = res.status;\r\n\r\n      if (resStatus === 'success') handleAuthSuccess(res, dispatch);\r\n      else if (resStatus === 'fail') handleAuthFailure(res, dispatch);\r\n      else if (resStatus === 'error') handleAuthError(res, dispatch);\r\n   };\r\n};\r\n","import * as actionTypes from './msg.action.types';\r\nimport * as utils from '../../utils/api';\r\nimport * as actionCreators from '../chat/chat.action.creators';\r\n\r\nexport const addFetchedChatMsgs = (chatId, msgs) => ({\r\n   type: actionTypes.FETCH_CHAT_MSGS,\r\n   payload: { chatId, msgs }\r\n});\r\n\r\nexport const addNewMsg = (chatId, msg) => ({\r\n   type: actionTypes.ADD_NEW_MSG,\r\n   payload: { chatId, msg }\r\n});\r\n\r\nexport const fetchChatMsgs = (authToken, chatId) => {\r\n   return async dispatch => {\r\n      try {\r\n         const response = await utils.API.fetchChatMsgs(authToken, chatId);\r\n         console.log(response);\r\n         const { msgs } = await response.json();\r\n         dispatch(addFetchedChatMsgs(chatId, msgs));\r\n      } catch (err) {\r\n         console.log('ERR', err);\r\n      } finally {\r\n         dispatch(\r\n            actionCreators.setChatMsgsLoading({ chatId, isLoading: false })\r\n         );\r\n      }\r\n   };\r\n};\r\n\r\nexport const markMsgsAsRead = (msgIdsArr, chatId) => ({\r\n   type: actionTypes.MARK_MSGS_AS_READ,\r\n   payload: { msgIdsArr, chatId }\r\n});\r\n","import {\n   RING,\n   STOP_RINGING,\n   START_CALL,\n   SET_RTC_OFFER,\n   SET_RTC_ANSWER,\n   ACCEPT_CALL,\n   SET_IS_ADDING_NEW_PEER_TO_CALL\n} from './videocall.action.types';\n\nimport { getVideoChatRoomId } from './videocall.utils.js';\n\n// For outgoing\nexport const setRtcAnswer = answer => ({\n   type: SET_RTC_ANSWER,\n   payload: { answer }\n});\n\nexport const startVideoCall = (userId, callingWho) => ({\n   type: START_CALL,\n   payload: { caller: userId, callingWho, roomId: getVideoChatRoomId(userId) }\n});\n\n// For incoming\nexport const ring = (caller, roomId, offer) => dispatch => {\n   dispatch({ type: SET_RTC_OFFER, payload: { offer } });\n   dispatch({ type: RING, payload: { caller, roomId } });\n};\n\nexport const acceptCall = () => dispatch => {\n   dispatch({ type: STOP_RINGING });\n   dispatch({ type: ACCEPT_CALL });\n};\n\n// For general\nexport const setIsAddingNewPeerToCall = boolVal => ({\n   type: SET_IS_ADDING_NEW_PEER_TO_CALL,\n   payload: { boolVal }\n});\n","import React, { createContext } from 'react';\n\nimport store from '../redux/store';\nimport { addNewMsg } from '../redux/msg/msg.actions.creators';\nimport { setSomeoneIsTyping } from '../redux/chat/chat.action.creators';\nimport { ADD_VIDEOCALL_MSG } from '../redux/videocall/videocall.action.types';\nimport { ring } from '../redux/videocall/videocall.action.creators';\nimport io from 'socket.io-client';\n\nconst socket = io.connect('/');\n\nsocket.onAny((evt, ...args) => {\n   console.log(`EVENT: ${evt}, ARGS: ${args}`);\n});\n\nsocket.on('new-msg-in', ({ newMsg, status }) => {\n   status === 'success' && store.dispatch(addNewMsg(newMsg.sender, newMsg));\n});\n\nsocket.on('user-is-typing', ({ typist: chatId, isTyping }) => {\n   store.dispatch(setSomeoneIsTyping({ chatId, isTyping }));\n});\n\nsocket.on('online-status-in', (chatId, onlineStatus) => {\n   alert(`${chatId} is ${onlineStatus}`);\n});\n\nfunction socketEmitPrivateMsgOut({ from, sendTo: receiver, text, sentAt }) {\n   socket.emit('private-msg-out', { from, sendTo: receiver, text, sentAt });\n   store.dispatch(\n      addNewMsg(receiver, { sender: from, receiver, text, createdAt: sentAt })\n   );\n}\n\n// For videoCall signals\nsocket.on('incoming-videocall', function (callDetails) {\n   const { roomId, caller, offer } = callDetails;\n   store.dispatch(ring(caller, roomId, offer));\n\n   // socket.on('candidate-in', function (candidate) {\n   //    console.log('Candidate sent in');\n   //    store.dispatch({ type: SET_RTC_CANDIDATE, payload: { candidate } });\n   // });\n});\n\nsocket.on('incoming-video-call-msg', msg => {\n   store.dispatch({ type: ADD_VIDEOCALL_MSG, payload: { msg } });\n});\n\nexport const socketContext = createContext();\n\nexport const SocketProvider = props => (\n   <socketContext.Provider value={{ socket, socketEmitPrivateMsgOut }}>\n      {props.children}\n   </socketContext.Provider>\n);\n","import { createSelector } from 'reselect';\r\n\r\nexport const selectAppSettings = state => state.appsettings;\r\n\r\nexport const selectAppTheme = createSelector(\r\n   [selectAppSettings],\r\n   appsettings => appsettings.theme\r\n);\r\n","import React, { createContext } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectAppTheme } from '../redux/appsettings/appsettings.selectors';\r\nimport { TOGGLE_APP_THEME } from '../redux/appsettings/appsettings.actions';\r\n\r\nexport const themeContext = createContext();\r\n\r\nfunction ThemeProvider(props) {\r\n   const { appTheme, toggleTheme } = props;\r\n   console.log(appTheme, toggleTheme);\r\n\r\n   return (\r\n      <themeContext.Provider value={{ appTheme, toggleTheme }}>\r\n         {props.children}\r\n      </themeContext.Provider>\r\n   );\r\n}\r\nconst mapStateToProps = createStructuredSelector({\r\n   appTheme: selectAppTheme\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n   toggleTheme: () => dispatch({ type: TOGGLE_APP_THEME })\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ThemeProvider);\r\n","import React from 'react';\nimport './Overlay.scss';\n\nconst Overlay = ({ showIf: isVisible, transparent, ...restProps }) => (\n   <div\n      className={`overlay overlay--${!isVisible && 'hidden'} ${\n         transparent && 'overlay--transparent'\n      }`}\n      {...restProps}\n   ></div>\n);\nexport default Overlay;\n","import React, { useState, useContext } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { addUserAsFriend } from '../../../redux/chat/chat.action.creators';\r\nimport {\r\n   selectUser,\r\n   selectCurrentUser\r\n} from '../../../redux/user/user.selectors';\r\n\r\nimport { themeContext } from '../../../contexts/ThemeProvider';\r\n\r\nimport { API } from '../../../utils/api';\r\nimport Overlay from '../../UI/Overlay';\r\n\r\nimport './NavbarSearch.scss';\r\n\r\nfunction NavbarSearch({ user, currentUser, dispatch }) {\r\n   const authToken = user.token;\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n   const [searchResults, setSearchResults] = useState([]);\r\n   const [suggestionsShown, setSuggestionsShown] = useState(false);\r\n   const { appTheme } = useContext(themeContext);\r\n   const darkTheme = appTheme === 'dark';\r\n\r\n   const searchPeople = async function (query) {\r\n      try {\r\n         const response = await API.searchPeople(authToken, query);\r\n         console.log(response.users);\r\n         setSearchResults(response.users);\r\n\r\n         if (response.users.length) setSuggestionsShown(true);\r\n      } catch (err) {\r\n         alert('Sorry omething went wrong. Check your internet connection');\r\n      }\r\n   };\r\n\r\n   const handleChange = ev => {\r\n      const { value } = ev.target;\r\n      setSearchQuery(value);\r\n\r\n      if (!value) setSearchResults([]);\r\n      else searchPeople(value);\r\n   };\r\n   const handleFocus = ev => {\r\n      if (!searchResults) return;\r\n      searchResults.length && setSuggestionsShown(true);\r\n   };\r\n\r\n   const handleClickAddBtn = userId => {\r\n      dispatch(addUserAsFriend(authToken, userId));\r\n      setSuggestionsShown(false);\r\n   };\r\n\r\n   return (\r\n      <div className='navbar__search'>\r\n         <input\r\n            type='text'\r\n            className={`navbar__search__input navbar__search__input--${\r\n               suggestionsShown && 'suggestions-shown'\r\n            } ${darkTheme && 'd-theme'}`}\r\n            placeholder='Search people'\r\n            value={searchQuery}\r\n            onChange={handleChange}\r\n            onFocus={handleFocus}\r\n         />\r\n         {suggestionsShown && (\r\n            <div\r\n               className={`navbar__search__suggestions ${\r\n                  darkTheme && 'd-theme'\r\n               }`}\r\n            >\r\n               {searchResults.map(user => (\r\n                  <div\r\n                     className={`navbar__search__suggestion ${\r\n                        darkTheme && 'd-theme'\r\n                     }`}\r\n                     key={user._id}\r\n                  >\r\n                     <img\r\n                        src={`/users/${user.photo}`}\r\n                        alt=''\r\n                        className='navbar__search__suggestion__photo pic pic--sm'\r\n                     />\r\n                     <div className='navbar__search__suggestion__user-info'>\r\n                        <span className='navbar__search__suggestion__username'>\r\n                           {user.username}{' '}\r\n                           <span className='navbar__search__suggestion__email'>\r\n                              {user.email}\r\n                           </span>\r\n                        </span>\r\n                        {/* <span className=\"navbar__search-suggestion__mutual-friends\">\r\n                           3 mutual friends\r\n                        </span> */}\r\n                     </div>\r\n                     <button\r\n                        className='btn btn-md btn-primary'\r\n                        onClick={() => handleClickAddBtn(user._id)}\r\n                     >\r\n                        Add friend\r\n                     </button>\r\n                  </div>\r\n               ))}\r\n            </div>\r\n         )}\r\n         <Overlay\r\n            showIf={suggestionsShown}\r\n            transparent\r\n            onClick={() => {\r\n               setSuggestionsShown(false);\r\n            }}\r\n         />\r\n      </div>\r\n   );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n   user: selectUser,\r\n   currentUser: selectCurrentUser\r\n});\r\nexport default connect(mapStateToProps)(NavbarSearch);\r\n","import { createSelector } from 'reselect';\r\n\r\nexport const selectChatState = state => state.chat;\r\nconst actualCall = state => state.videocall.call;\r\n\r\nexport const selectChats = createSelector(\r\n   [selectChatState],\r\n   chat => chat.chats\r\n);\r\n\r\nexport const selectTotalChatCount = createSelector(\r\n   [selectChats],\r\n   chats => chats.length\r\n);\r\n\r\nexport const selectIsLoadingChatMsgs = chatId =>\r\n   createSelector(\r\n      [selectChats],\r\n      chats => chats.find(chat => chat.id === chatId).isLoadingMsgs\r\n   );\r\n\r\nexport const selectCallerInChat = createSelector(\r\n   [selectChats, actualCall],\r\n   (chats, call) => chats.find(chat => chat._id === call.caller)\r\n);\r\n\r\nexport const selectCurrentChat = chatId =>\r\n   createSelector([selectChats], chats => {\r\n      const chat = chats.find(chat => chat._id === chatId);\r\n      return chat;\r\n   });\r\n","import { useState } from 'react';\n\nexport const useToggle = function (initState = false) {\n   const [state, setState] = useState(initState);\n\n   const toggle = () => setState(!state);\n   const reset = () => setState(initState);\n   return [state, setState, toggle, reset];\n};\n","import React, { useContext } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport {\r\n   selectUser,\r\n   selectCurrentUser\r\n} from '../../../redux/user/user.selectors';\r\nimport { selectTotalChatCount } from '../../../redux/chat/chat.selectors';\r\nimport {\r\n   changeProfilePhoto,\r\n   logOutUser\r\n} from '../../../redux/user/user.actions.creators';\r\n\r\nimport { useToggle } from '../../../hooks/useToggle';\r\nimport { themeContext } from '../../../contexts/ThemeProvider';\r\nimport { API } from '../../../utils/api';\r\nimport './Myprofile.scss';\r\n\r\nconst Myprofile = function (props) {\r\n   const {\r\n      user,\r\n      currentUser,\r\n      changeProfilePhoto,\r\n      totalChatCount,\r\n      logOutUser\r\n   } = props;\r\n\r\n   const { appTheme } = useContext(themeContext);\r\n   const darkTheme = appTheme === 'dark';\r\n   const [showFullProfile, _, toggleShowFullProfile] = useToggle(false);\r\n\r\n   const handleFileChosen = async function (ev) {\r\n      const chosenFile = ev.target.files[0];\r\n      const form = new FormData();\r\n      form.append('photo', chosenFile);\r\n\r\n      const res = await API.updateUser(user.token, form);\r\n      changeProfilePhoto(res.user.photo);\r\n   };\r\n\r\n   return (\r\n      <div className='navbar__myprofile'>\r\n         <div\r\n            className={`navbar__loggedin-user ${darkTheme && 'd-theme'}`}\r\n            onClick={toggleShowFullProfile}\r\n         >\r\n            <img\r\n               src={`/users/${currentUser.photo}`}\r\n               alt=''\r\n               className='navbar__photo pic pic--sm'\r\n            />\r\n            <span className='navbar__username'>{currentUser.username}</span>\r\n         </div>\r\n         <div\r\n            className={`navbar__myprofile__dropdown ${darkTheme && 'd-theme'} ${\r\n               showFullProfile && 'navbar__myprofile__dropdown--slide-into-view'\r\n            }`}\r\n         >\r\n            <picture className='navbar__myprofile__dropdown__picture'>\r\n               <img\r\n                  src={`/users/${currentUser.photo}`}\r\n                  alt=''\r\n                  className='navbar__myprofile__dropdown__picture__photo'\r\n               />\r\n               <form className='navbar__myprofile__dropdown__picture__form-upload'>\r\n                  <input\r\n                     type='file'\r\n                     id='profile-photo'\r\n                     accept='image/*'\r\n                     onChange={handleFileChosen}\r\n                  />\r\n                  <label htmlFor='profile-photo'>Change photo</label>\r\n                  {/* <i className=\"fas fa-camera\"></i> */}\r\n               </form>\r\n            </picture>\r\n            <div className='navbar__myprofile__dropdown__user-details'>\r\n               <span className='navbar__myprofile__dropdown__username'>\r\n                  {currentUser.username}\r\n               </span>\r\n               <span className='navbar__myprofile__dropdown__email'>\r\n                  {currentUser.email}\r\n               </span>\r\n               <span className='navbar__myprofile__dropdown__friendscount'>\r\n                  {totalChatCount}{' '}\r\n                  {`${totalChatCount === 1 ? 'friend' : 'friends'}`}\r\n               </span>\r\n               {/* <span className=\"navbar__myprofile__dropdown__datejoined\">\r\n                  Joined Mar. 24\r\n               </span> */}\r\n            </div>\r\n            <button\r\n               className='btn btn-md btn-primary logout'\r\n               onClick={logOutUser}\r\n            >\r\n               Log out\r\n            </button>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n   user: selectUser,\r\n   currentUser: selectCurrentUser,\r\n   totalChatCount: selectTotalChatCount\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n   changeProfilePhoto: fileName => dispatch(changeProfilePhoto(fileName)),\r\n   logOutUser: () => dispatch(logOutUser())\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Myprofile);\r\n","import React, { useContext } from 'react';\r\nimport { themeContext } from '../../../contexts/ThemeProvider';\r\nimport './ThemeToggler.scss';\r\n\r\nfunction ThemeToggler() {\r\n   const { appTheme, toggleTheme } = useContext(themeContext);\r\n   const darkTheme = appTheme === 'dark';\r\n\r\n   return (\r\n      <div\r\n         className={`navbar__theme-toggler ${darkTheme && 'd-theme'}`}\r\n         onClick={toggleTheme}\r\n         data-status={`${darkTheme ? 'Dark' : 'Light'}`}\r\n      >\r\n         <span className='navbar__theme-toggler__switch'></span>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default ThemeToggler;\r\n","import React, { useContext, useRef } from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUser } from '../../../redux/user/user.selectors';\r\n\r\nimport { themeContext } from '../../../contexts/ThemeProvider';\r\n\r\nimport NavbarSearch from './NavbarSearch';\r\nimport Myprofile from './Myprofile';\r\nimport RateReviewIcon from '@material-ui/icons/RateReview';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport ThemeToggler from './ThemeToggler';\r\n\r\nimport './Navbar.scss';\r\n\r\nfunction Navbar({ user }) {\r\n   const { isLoggedIn } = user;\r\n   const { appTheme } = useContext(themeContext);\r\n   const darkTheme = appTheme === 'dark';\r\n\r\n   const authlinks = [\r\n      {\r\n         label: 'Posts',\r\n         icon: (\r\n            <RateReviewIcon\r\n               className='navbar__link__icon'\r\n               style={{ fontSize: '2rem' }}\r\n            />\r\n         )\r\n      },\r\n      {\r\n         label: 'My profile',\r\n         icon: (\r\n            <PersonIcon\r\n               className='navbar__link__icon'\r\n               style={{ fontSize: '2.2rem' }}\r\n            />\r\n         )\r\n      },\r\n      {\r\n         label: 'Settings',\r\n         icon: (\r\n            <SettingsIcon\r\n               className='navbar__link__icon'\r\n               style={{ fontSize: '2rem' }}\r\n            />\r\n         )\r\n      }\r\n   ];\r\n   return (\r\n      <nav className={`navbar ${darkTheme && 'd-theme'}`}>\r\n         <Link to='/dashboard' className='navbar__logo'>\r\n            helomi\r\n         </Link>\r\n\r\n         {isLoggedIn && <NavbarSearch />}\r\n         {isLoggedIn && <Myprofile />}\r\n         <ThemeToggler />\r\n\r\n         {/* <div className=\"navbar__links remove-bullets\">\r\n            {user.isLoggedIn &&\r\n               authlinks.map(({ label, icon }) => (\r\n                  <NavLink\r\n                     key={label}\r\n                     to={`/${label.toLowerCase().split(' ').join('-')}`}\r\n                     className=\"navbar__link\"\r\n                     activeClassName=\"navbar__link--active\"\r\n                  >\r\n                     {icon}\r\n                     <span className=\"navbar__link__label\">{label}</span>\r\n                  </NavLink>\r\n               ))}\r\n         </div> */}\r\n      </nav>\r\n   );\r\n}\r\nconst mapStateToProps = createStructuredSelector({\r\n   user: selectUser\r\n});\r\nexport default connect(mapStateToProps)(Navbar);\r\n","import React, { useContext } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUser } from '../../../redux/user/user.selectors';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { themeContext } from '../../../contexts/ThemeProvider';\r\nimport './Landing-page.scss';\r\n\r\nconst LandingPage = ({ user }) => {\r\n   const { appTheme } = useContext(themeContext);\r\n   const darkTheme = appTheme === 'dark';\r\n\r\n   return user.isLoggedIn ? (\r\n      <Redirect to='/dashboard' />\r\n   ) : (\r\n      <div className='home'>\r\n         <header className='home__header'>\r\n            <div className='home__header__textbox'>\r\n               <h1 className='h-1 home__header__heading u-mgb-sm'>\r\n                  Enjoy the moments of communication.\r\n               </h1>\r\n               <p className='parag u-mgb-lg'>\r\n                  Helomi is a desktop web-based chat application for making\r\n                  memorable communication experiences.\r\n               </p>\r\n               <Link to='/signup' className='btn btn-black btn-lg btn--rounded'>\r\n                  Get started\r\n               </Link>\r\n            </div>\r\n            <picture className='home__header__picture'>\r\n               <img\r\n                  className='home__header__img'\r\n                  src={process.env.PUBLIC_URL + '/img/hero.png'}\r\n                  alt=''\r\n               />\r\n            </picture>\r\n         </header>\r\n         <section className={`home__services ${darkTheme && 'd-theme'}`}>\r\n            <div className={`service ${darkTheme && 'd-theme'}`}>\r\n               <span className='service__icon'>\r\n                  <span\r\n                     class=' iconify'\r\n                     data-icon='ion:chatbox-ellipses'\r\n                  ></span>\r\n               </span>\r\n\r\n               <div className='service__textbox'>\r\n                  <h4 className='h-4 u-text-center'>Instant messaging</h4>\r\n                  <p className='parag u-text-center'>\r\n                     Send text messages at real time to your friends and loved\r\n                     ones for free anytime, anywhere.\r\n                  </p>\r\n               </div>\r\n            </div>\r\n            <div className={`service ${darkTheme && 'd-theme'}`}>\r\n               <span className='service__icon'>\r\n                  <span class=' iconify' data-icon='ion:videocam'></span>\r\n               </span>\r\n\r\n               <div className='service__textbox'>\r\n                  <h4 className='h-4 u-text-center'>Video calling</h4>\r\n                  <p className='parag u-text-center'>\r\n                     Communicate with anyone through a real-time video streaming\r\n                     for free.\r\n                  </p>\r\n               </div>\r\n            </div>\r\n         </section>\r\n         <footer className={`footer ${darkTheme && 'd-theme'}`}>\r\n            <Link to='/' className='navbar__logo'>\r\n               helomi\r\n            </Link>\r\n            <span className='footer__copyr'>\r\n               Helomi. © Copyright 2021. All rights reserved.\r\n            </span>\r\n            <span className='footer__designedby'>\r\n               Designed and powered by Chima Orji Divine.\r\n            </span>\r\n         </footer>\r\n      </div>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n   user: selectUser\r\n});\r\n\r\nexport default connect(mapStateToProps)(LandingPage);\r\n","import React from 'react';\r\n\r\nfunction TextInput({ onFocusOut, ...restProps }) {\r\n   return <input {...restProps} onBlur={onFocusOut} />;\r\n}\r\nexport default TextInput;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { withRouter, useParams } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { selectChats } from '../../../redux/chat/chat.selectors';\r\nimport { selectUser } from '../../../redux/user/user.selectors';\r\nimport { socketContext } from '../../../contexts/SocketProvider';\r\nimport { themeContext } from '../../../contexts/ThemeProvider';\r\n\r\nimport TextInput from '../../formUI/TextInput';\r\nimport './Chat-footer.scss';\r\n\r\nfunction ChatFooter({ user: { currentUser }, allChats, dispatch }) {\r\n   const { appTheme } = useContext(themeContext);\r\n   const darkTheme = appTheme === 'dark';\r\n   const [newMsg, setNewMsg] = useState('');\r\n   const { socket, socketEmitPrivateMsgOut } = useContext(socketContext);\r\n   const currentChat = useParams().id;\r\n\r\n   useEffect(() => {\r\n      socket.emit('typing', {\r\n         typist: currentUser._id,\r\n         allChats: allChats.map(chat => chat._id),\r\n         isTyping: Boolean(newMsg.length)\r\n      });\r\n   }, [newMsg]);\r\n\r\n   const sendMessage = ev => {\r\n      ev?.preventDefault();\r\n      socketEmitPrivateMsgOut({\r\n         from: currentUser._id,\r\n         sendTo: currentChat,\r\n         text: newMsg,\r\n         sentAt: new Date()\r\n      });\r\n      setNewMsg('');\r\n   };\r\n\r\n   const onChange = ev => setNewMsg(ev.target.value);\r\n   // const emojis = []\r\n   return (\r\n      <div className={`chatting-section__footer ${darkTheme && 'd-theme'}`}>\r\n         {/* <div className=\"icon\">\r\n            <i className=\"fas fa-file-invoice\"></i>\r\n         </div>\r\n         <div className=\"emojis\">\r\n            <div className=\"icon\">\r\n               <i className=\"far fa-laugh\"></i>\r\n            </div>\r\n            <div class=\"allemojis\"></div>\r\n         </div> */}\r\n\r\n         <form className=\"new-msg\" onSubmit={sendMessage}>\r\n            <div className=\"new-msg__group\">\r\n               <TextInput\r\n                  type=\"text\"\r\n                  className=\"textfield textfield--message new-msg__input\"\r\n                  placeholder=\"Type a message\"\r\n                  value={newMsg}\r\n                  onChange={onChange}\r\n               />\r\n               <div className=\"icon\" onClick={() => setNewMsg('')}>\r\n                  &times;\r\n               </div>\r\n            </div>\r\n            <div className=\"icon\" onClick={() => sendMessage()} type=\"submit\">\r\n               <i className=\"fas fa-paper-plane\"></i>\r\n            </div>\r\n         </form>\r\n      </div>\r\n   );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n   user: selectUser,\r\n   allChats: selectChats\r\n});\r\nexport default withRouter(connect(mapStateToProps)(ChatFooter));\r\n","import React from 'react';\r\nimport './Dropdown.scss';\r\n\r\nfunction Dropdown(props) {\r\n   const {\r\n      showIf: isVisble,\r\n      className,\r\n      children: listItems,\r\n      ...restProps\r\n   } = props;\r\n   return (\r\n      isVisble && (\r\n         <ul className={className + ' dropdown remove-bullets'} {...restProps}>\r\n            {listItems}\r\n         </ul>\r\n      )\r\n   );\r\n}\r\nexport default Dropdown;\r\n","import React, { useState, useContext } from 'react';\r\nimport { withRouter, useParams, Link } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n   selectUser,\r\n   selectCurrentUser\r\n} from '../../../redux/user/user.selectors';\r\nimport { startVideoCall } from '../../../redux/videocall/videocall.action.creators';\r\nimport { selectCurrentChat } from '../../../redux/chat/chat.selectors';\r\nimport { deleteChat } from '../../../redux/chat/chat.action.creators';\r\n\r\nimport { themeContext } from '../../../contexts/ThemeProvider';\r\nimport { useToggle } from '../../../hooks/useToggle';\r\nimport Dropdown from '../../formUI/Dropdown';\r\nimport Overlay from '../../UI/Overlay';\r\n\r\nimport './Chat-header.scss';\r\nimport '../../Icon.scss';\r\n\r\n// 'user' is not in use for now\r\nfunction ChatHeader({ user, currentChat, currentUser, dispatch }) {\r\n   const currentChatId = useParams().id;\r\n   const [chatPhotoZoomedIn, setChatPhotoZoomedIn] = useState(false);\r\n   const [optionsShown, setOptionsShown, toggleOptionsShown] = useToggle(false);\r\n   const { appTheme } = useContext(themeContext);\r\n   const darkTheme = appTheme === 'dark';\r\n\r\n   const handleClickOverlay = () => {\r\n      setChatPhotoZoomedIn(false);\r\n      setOptionsShown(false);\r\n   };\r\n\r\n   return (\r\n      <div className={`chatting-section__header ${darkTheme && 'd-theme'}`}>\r\n         <div className='chatting-section__header__userdetails'>\r\n            <div\r\n               className={`chatting-section__header__userphoto chatting-section__header__userphoto--${\r\n                  chatPhotoZoomedIn ? 'zoomed-in' : 'zoomed-out'\r\n               }`}\r\n            >\r\n               <img\r\n                  src={`/users/${currentChat.photo}`}\r\n                  alt=''\r\n                  className='user-img pic pic--sm'\r\n                  onClick={() => setChatPhotoZoomedIn(true)}\r\n               />\r\n            </div>\r\n            <span className='chatting-section__header__username'>\r\n               {currentChat.username}\r\n            </span>\r\n         </div>\r\n         <div\r\n            className={`chatting-section__header__nav ${\r\n               darkTheme && 'd-theme'\r\n            }`}\r\n         >\r\n            {/* <i\r\n               className=\"fas fa-phone-alt with-label with-label-at-bottom\"\r\n               data-label=\"Start audio call\"\r\n            ></i> */}\r\n            <i\r\n               className='fas fa-video with-label with-label-at-bottom'\r\n               data-label='Start video call'\r\n               onClick={() =>\r\n                  dispatch(startVideoCall(currentUser._id, currentChatId))\r\n               }\r\n            ></i>\r\n            {/* </Link> */}\r\n            {/* <div className='chatting-section__header__nav__options'>\r\n               <i\r\n                  className='fas fa-ellipsis-v chatting-section__header__nav__options-icon'\r\n                  onClick={toggleOptionsShown}></i>\r\n               <Dropdown\r\n                  className='chatting-section__header__nav__options__dropdown'\r\n                  showIf={false}\r\n                  children={\r\n                     <li\r\n                        className='chatting-section__header__nav__options__item'\r\n                        onClick={() =>\r\n                           dispatch(deleteChat(user.token, currentChatId))\r\n                        }>\r\n                        Delete friend\r\n                     </li>\r\n                  }\r\n               />\r\n            </div> */}\r\n         </div>\r\n         <Overlay\r\n            showIf={chatPhotoZoomedIn || optionsShown}\r\n            onClick={handleClickOverlay}\r\n            transparent={optionsShown}\r\n         />\r\n      </div>\r\n   );\r\n}\r\nconst mapStateToProps = (state, ownProps) => ({\r\n   user: selectUser(state),\r\n   currentUser: selectCurrentUser(state),\r\n   currentChat: selectCurrentChat(ownProps.match.params.id)(state)\r\n});\r\nexport default withRouter(connect(mapStateToProps)(ChatHeader));\r\n","export const getVideoChatRoomId = callerId => 'videochat' + callerId;\n\nexport class PeerConnection {\n   _iceConfig = {\n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n   };\n\n   constructor({ isInitiator, stream, currentUser, socket }) {\n      this.connection = new RTCPeerConnection(this._iceConfig);\n      this.isInitiator = isInitiator || false;\n      this.stream = stream;\n      this.socket = socket;\n      this.currentUser = currentUser;\n      this.isConnected = false;\n      this.init();\n   }\n}\n\nexport class JoiningPeer extends PeerConnection {\n   constructor(params) {\n      super(params);\n   }\n\n   handleVideoOffer = async offer => {\n      await this.connection.setRemoteDescription(\n         new RTCSessionDescription(offer)\n      );\n   };\n\n   createAnswer = async caller => {\n      const answer = await this.connection.createAnswer();\n      await this.connection.setLocalDescription(answer);\n\n      this.socket.emit('answer-call', { to: caller, answer });\n   };\n}\n\nexport const getUserMediaStream = function getUserMedia() {\n   const getUserMedia = (\n      navigator.getUserMedia ||\n      navigator.webkitGetUserMedia ||\n      navigator.mozGetUserMedia ||\n      navigator.msGetUserMedia\n   ).bind(window.navigator);\n\n   return new Promise((resolve, reject) => {\n      getUserMedia(\n         { audio: true, video: true },\n         stream => {\n            // setLocalStream(stream);\n            resolve(stream);\n         },\n         err => reject(err)\n      );\n   });\n};\n","import { createSelector } from 'reselect';\r\n\r\nexport const selectMsg = state => state.msg;\r\nexport const selectAllMsgs = createSelector([selectMsg], msg => msg.messages);\r\n\r\nexport const selectChatMsgs = chatId => {\r\n   return createSelector([selectMsg], msg => msg.messages[chatId]);\r\n};\r\n\r\nexport const selectUnreadMsgsSentByChat = chatId => {\r\n   return createSelector([selectMsg], msg =>\r\n      msg.messages[chatId]?.filter(msg => msg.sender === chatId && !msg.isRead)\r\n   );\r\n};\r\n","export const dateTimeFormat = (timestamp, options) =>\r\n   new Intl.DateTimeFormat(window.navigator.language, options).format(\r\n      timestamp\r\n   );\r\n\r\nexport const getDaysPassed = (date1, date2) => {\r\n   return (date2.getTime() - date1.getTime()) / (1000 * 60 * 60 * 24);\r\n};\r\n\r\nexport const getMsgSentTime = timestamp => {\r\n   const formatOptions = { hour: 'numeric', hour12: true, minute: 'numeric' };\r\n   const numDaysPassed = Math.round(\r\n      getDaysPassed(new Date(timestamp), new Date())\r\n   );\r\n\r\n   if (numDaysPassed < 1) return dateTimeFormat(timestamp, formatOptions);\r\n   if (numDaysPassed === 1)\r\n      return ['Yesterday', dateTimeFormat(timestamp, formatOptions)].join(', ');\r\n\r\n   if (numDaysPassed <= 7)\r\n      return `${dateTimeFormat(timestamp, { weekday: 'short' })}, \r\n         ${dateTimeFormat(timestamp, formatOptions)}`;\r\n\r\n   return dateTimeFormat(timestamp, {\r\n      ...formatOptions,\r\n      day: 'numeric',\r\n      month: 'short'\r\n   });\r\n};\r\n","import React, { useContext } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { selectUser } from '../redux/user/user.selectors';\r\n\r\nimport { themeContext } from '../contexts/ThemeProvider';\r\nimport { getMsgSentTime } from '../redux/msg/msg.utils';\r\nimport './Textmsg.scss';\r\n\r\nfunction Textmsg({ msg, user: { currentUser } }) {\r\n   const { appTheme } = useContext(themeContext);\r\n   const darkTheme = appTheme === 'dark';\r\n\r\n   const direction = msg.sender === currentUser._id ? 'outgoing' : 'incoming';\r\n   return (\r\n      <div\r\n         className={`textmsg textmsg--${direction} ${darkTheme && 'd-theme'}`}\r\n      >\r\n         <p className=\"textmsg__content\">{msg.text}</p>\r\n         <p className=\"textmsg__time\">\r\n            {getMsgSentTime(+new Date(msg.createdAt))}\r\n         </p>\r\n      </div>\r\n   );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n   user: selectUser\r\n});\r\nexport default connect(mapStateToProps)(Textmsg);\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { useParams, withRouter } from 'react-router-dom';\r\nimport ReactScrollableFeed from 'react-scrollable-feed';\r\n\r\nimport { connect } from 'react-redux';\r\nimport * as msgActions from '../../../redux/msg/msg.actions.creators';\r\n// prettier-ignore\r\nimport { selectChatMsgs, selectUnreadMsgsSentByChat } from '../../../redux/msg/msg.selectors';\r\nimport { selectUser } from '../../../redux/user/user.selectors';\r\nimport { selectIsLoadingChatMsgs } from '../../../redux/chat/chat.selectors';\r\n\r\nimport { socketContext } from '../../../contexts/SocketProvider';\r\nimport { themeContext } from '../../../contexts/ThemeProvider';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n// import Textmsg from '../../textmsg/Textmsg';\r\nimport './Messages-box.scss';\r\nimport Textmsg from '../../Textmsg';\r\n\r\nfunction MessagesBox(props) {\r\n   const { appTheme } = useContext(themeContext);\r\n   const darkTheme = appTheme === 'dark';\r\n   // prettier-ignore\r\n   const { allMsgs, unreadMsgs, markMsgsAsRead, isLoadingChatMsgs, fetchChatMsgs, user } = props;\r\n   const chatId = useParams().id;\r\n   const { socket } = useContext(socketContext);\r\n\r\n   // If any new message is sent by active chat, mark that message as seen since it is viewed immediately\r\n   useEffect(() => {\r\n      socket.on('new-msg-in', ({ newMsg, status }) => {\r\n         if (newMsg.sender === chatId) {\r\n            socket.emit('set-unreadMsgs-to-read', { unreadMsgs });\r\n            markMsgsAsRead(newMsg._id, [chatId]);\r\n         }\r\n      });\r\n   }, []);\r\n\r\n   // Upon mounting, set any unseen msgs to seen\r\n   useEffect(() => {\r\n      if (isLoadingChatMsgs) fetchChatMsgs(user.token, chatId);\r\n      if (!unreadMsgs?.length) return;\r\n\r\n      socket.emit('set-unreadMsgs-to-read', { unreadMsgs });\r\n      markMsgsAsRead(\r\n         unreadMsgs.map(m => m._id),\r\n         chatId\r\n      );\r\n   }, [chatId]);\r\n\r\n   return (\r\n      <ReactScrollableFeed>\r\n         <div\r\n            className={`chatting-section__messages-box ${\r\n               darkTheme && 'd-theme'\r\n            }`}>\r\n            {allMsgs?.map(msg => (\r\n               <Textmsg key={uuidv4() + msg._id} msg={msg} />\r\n            ))}\r\n         </div>\r\n      </ReactScrollableFeed>\r\n   );\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n   user: selectUser(state),\r\n   allMsgs: selectChatMsgs(ownProps.match.params.id)(state),\r\n   unreadMsgs: selectUnreadMsgsSentByChat(ownProps.match.params.id)(state),\r\n   isLoadingChatMsgs: selectIsLoadingChatMsgs(ownProps.match.params.id)(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n   fetchChatMsgs: (token, chatId) =>\r\n      dispatch(msgActions.fetchChatMsgs(token, chatId)),\r\n   markMsgsAsRead: (msgIds, chatId) =>\r\n      dispatch(msgActions.markMsgsAsRead(msgIds, chatId))\r\n});\r\n\r\nexport default withRouter(\r\n   connect(mapStateToProps, mapDispatchToProps)(React.memo(MessagesBox))\r\n);\r\n","export function getEmptyFields(dataObject) {\r\n   return Object.keys(dataObject).filter(key => !dataObject[key]);\r\n}\r\n\r\nexport function toFirstLetterUpper(str) {\r\n   return str[0].toUpperCase() + str.slice(1).toLowerCase();\r\n}\r\n","import React, { useContext, useEffect, useRef } from 'react';\nimport { themeContext } from '../../contexts/ThemeProvider';\nimport { toFirstLetterUpper } from '../../utils/others';\n\nimport './Loader.scss';\n\nfunction LoadingSpinner({ size, msg, showIf: conditionToShow }) {\n   const { appTheme } = useContext(themeContext);\n   const darkTheme = appTheme === 'dark';\n   const loaderRef = useRef();\n\n   // useEffect(() => {\n   //    if (!conditionToShow) loaderRef.current.classList.add('u-hidden');\n   // }, []);\n\n   return (\n      <div className={`loader ${darkTheme && 'd-theme'}`} ref={loaderRef}>\n         <div className={`loader__spinner loader__spinner--${size} `}></div>\n         {msg && (\n            <h4 className={`loader__msg loader__msg--${size}`}>\n               {toFirstLetterUpper(msg)}\n            </h4>\n         )}\n      </div>\n   );\n}\nexport default LoadingSpinner;\n","import React, { useContext } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { selectIsLoadingChatMsgs } from '../../../redux/chat/chat.selectors';\r\nimport ChatFooter from './Chat-footer';\r\nimport ChatHeader from './Chat-header';\r\nimport MessagesBox from './Messages-box';\r\n\r\nimport { themeContext } from '../../../contexts/ThemeProvider';\r\nimport LoadingSpinner from '../../UI/Loader';\r\nimport './Chatting-section.scss';\r\n\r\nfunction ChattingSection({ isLoadingMsgs }) {\r\n   const { appTheme } = useContext(themeContext);\r\n   const darkTheme = appTheme === 'dark';\r\n\r\n   return (\r\n      <React.Fragment>\r\n         <div className={`chatting-section ${darkTheme && 'd-theme'}`}>\r\n            <ChatHeader />\r\n            <MessagesBox />\r\n            <ChatFooter />\r\n            {isLoadingMsgs && (\r\n               <LoadingSpinner size='lg' msg='loading messages...' />\r\n            )}\r\n         </div>\r\n      </React.Fragment>\r\n   );\r\n}\r\nconst mapStateToProps = (state, ownProps) => ({\r\n   isLoadingMsgs: selectIsLoadingChatMsgs(ownProps.match.params.id)(state)\r\n});\r\nexport default connect(mapStateToProps)(ChattingSection);\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectChats } from '../../../redux/chat/chat.selectors';\r\nimport { searchChatByQuery } from '../../../redux/chat/chat.utils';\r\n\r\nimport { themeContext } from '../../../contexts/ThemeProvider';\r\nimport TextInput from '../../formUI/TextInput';\r\nimport Dropdown from '../../formUI/Dropdown';\r\nimport '../../../sass/textfield.scss';\r\nimport './Sidenav-search.scss';\r\n\r\nfunction SidenavSearch({ chats, history }) {\r\n   const [query, setQuery] = useState('');\r\n   const [showResults, setShowResults] = useState(false);\r\n   const [searchResults, setSearchResults] = useState([]);\r\n   const { appTheme } = useContext(themeContext);\r\n   const darkTheme = appTheme === 'dark';\r\n\r\n   useEffect(() => {\r\n      setShowResults(Boolean(query));\r\n      setSearchResults([...searchChatByQuery(chats, query)]);\r\n   }, [query]);\r\n\r\n   // Delayed by 100ms so that in case the focusOut is triggered by clicking a search result item, the effect triggered by clicking on this result item will be done before setting this state to false\r\n   const onFocusOut = _ => setTimeout(() => setShowResults(false), 100);\r\n   const onFocus = _ => setShowResults(Boolean(query));\r\n   const onChange = ({ target: { value } }) => setQuery(value);\r\n\r\n   return (\r\n      <div className={`search-section ${darkTheme && 'd-theme'}`}>\r\n         <form className='allchats__search' onSubmit={() => {}}>\r\n            <TextInput\r\n               type='text'\r\n               className={`textfield allchats__search__input ${\r\n                  darkTheme && 'd-theme'\r\n               }`}\r\n               placeholder='Search chats'\r\n               onChange={onChange}\r\n               onFocusOut={onFocusOut}\r\n               onFocus={onFocus}\r\n            />\r\n            <i className='fas fa-search allchats__search-icon'></i>\r\n\r\n            <Dropdown\r\n               showIf={showResults}\r\n               className={`allchats__search__results remove-bullets u-full-width u-block-center ${\r\n                  darkTheme && 'd-theme'\r\n               }`}\r\n               children={\r\n                  searchResults.length ? (\r\n                     searchResults.map(chat => (\r\n                        <Link\r\n                           to={`/dashboard/chats/${chat._id}`}\r\n                           key={chat.id}\r\n                           className={`allchats__search__results__result ${\r\n                              darkTheme && 'd-theme'\r\n                           }`}\r\n                        >\r\n                           {chat.username}\r\n                        </Link>\r\n                     ))\r\n                  ) : (\r\n                     <span\r\n                        className={`allchats__search__results__result ${\r\n                           darkTheme && 'd-theme'\r\n                        }`}\r\n                     >\r\n                        No results\r\n                     </span>\r\n                  )\r\n               }\r\n            />\r\n         </form>\r\n      </div>\r\n   );\r\n}\r\nconst mapStateToProps = createStructuredSelector({ chats: selectChats });\r\nexport default connect(mapStateToProps)(SidenavSearch);\r\n","export const searchChatByQuery = (chats, query) => {\r\n   if (!query || !chats) return [];\r\n   return chats.filter(\r\n      chat =>\r\n         chat.username.toLowerCase().startsWith(query.toLowerCase()) ||\r\n         chat.username.toLowerCase().includes(query.toLowerCase())\r\n   );\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectAllMsgs } from '../../../../redux/msg/msg.selectors';\r\nimport { selectCurrentUser } from '../../../../redux/user/user.selectors';\r\n\r\nimport { themeContext } from '../../../../contexts/ThemeProvider';\r\nimport { getMsgSentTime } from '../../../../redux/msg/msg.utils';\r\nimport './Chat.scss';\r\n\r\nfunction Chat({ chat, allReduxMsgs, currentUser }) {\r\n   const { appTheme } = useContext(themeContext);\r\n   const darkTheme = appTheme === 'dark';\r\n   const lastChatMsg = allReduxMsgs[chat._id]?.slice(-1).pop() || '';\r\n\r\n   const showLastMsgAsUnread =\r\n      currentUser.id !== lastChatMsg.sender && !lastChatMsg.isRead;\r\n\r\n   const unreadMsgsCount =\r\n      allReduxMsgs[chat._id]?.reduce((accum, msg) => {\r\n         return msg.sender === chat._id && !msg.isRead ? accum + 1 : accum + 0;\r\n      }, 0) || '';\r\n\r\n   return (\r\n      <NavLink\r\n         to={`/dashboard/chats/${chat._id}`}\r\n         className={`chat chat--has-unread-messages ${\r\n            darkTheme ? 'd-theme' : ''\r\n         }`}\r\n         activeClassName='chat--active'\r\n      >\r\n         <img\r\n            src={`/users/${chat.photo}`}\r\n            alt=''\r\n            className='chat__photo pic pic--sm'\r\n         />\r\n         <div className='chat__info '>\r\n            <span className='chat__name'>{chat.username}</span>\r\n            {chat.isTyping ? (\r\n               <span className='chat__is-typing'>typing...</span>\r\n            ) : (\r\n               <span\r\n                  className={`chat__lastmessage chat__lastmessage--${\r\n                     showLastMsgAsUnread && 'unread'\r\n                  }`}\r\n               >\r\n                  {lastChatMsg.text}\r\n               </span>\r\n            )}\r\n            {unreadMsgsCount && (\r\n               <span className='unread-messages-count'>{unreadMsgsCount}</span>\r\n            )}\r\n         </div>\r\n         <span className='chat__time'>2:35 PM</span>\r\n      </NavLink>\r\n   );\r\n}\r\n\r\nconst mapState = createStructuredSelector({\r\n   allReduxMsgs: selectAllMsgs,\r\n   currentUser: selectCurrentUser\r\n});\r\nexport default connect(mapState)(Chat);\r\n","import React, { useContext, useEffect } from 'react';\r\nimport SyncClient from 'twilio-sync';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectChats } from '../../../../redux/chat/chat.selectors';\r\nimport {\r\n   selectUser,\r\n   selectCurrentUser\r\n} from '../../../../redux/user/user.selectors';\r\n\r\nimport { socketContext } from '../../../../contexts/SocketProvider';\r\nimport { themeContext } from '../../../../contexts/ThemeProvider';\r\nimport LoadingSpinner from '../../../UI/Loader';\r\nimport Chat from './Chat';\r\nimport './ChatList.scss';\r\n\r\nfunction ChatList({ chats, user, currentUser }) {\r\n   const { socket } = useContext(socketContext);\r\n   const { appTheme } = useContext(themeContext);\r\n   const darkTheme = appTheme === 'dark';\r\n\r\n   // useEffect(async () => {\r\n   //    const syncClient = new SyncClient(user.twilioAccessToken);\r\n   //    const SyncList = await syncClient.list('online-users');\r\n   //    const localUser = await SyncList.push({ name: currentUser._id });\r\n   //    console.log(syncClient, SyncList, localUser);\r\n   // }, []);\r\n\r\n   return chats.length ? (\r\n      <div className={`allchats__chatlist ${darkTheme && 'd-theme'}`}>\r\n         {chats.map(ch => (\r\n            <Chat key={ch.id} chat={ch} />\r\n         ))}\r\n      </div>\r\n   ) : (\r\n      <LoadingSpinner />\r\n   );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n   chats: selectChats,\r\n   user: selectUser,\r\n   currentUser: selectCurrentUser\r\n});\r\nexport default connect(mapStateToProps)(ChatList);\r\n","import React, { useContext } from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { socketContext } from '../contexts/SocketProvider';\nimport { selectCallerInChat } from '../redux/chat/chat.selectors';\nimport { acceptCall } from '../redux/videocall/videocall.action.creators';\nimport {\n   ACCEPT_CALL,\n   STOP_RINGING\n} from '../redux/videocall/videocall.action.types';\nimport {\n   selectRtcOffer,\n   selectCaller,\n   selectVideoChatRoomId\n} from '../redux/videocall/videocall.selectors';\n\nimport './IncomingCallNotify.scss';\n\nfunction IncomingCallNotify({ callerInChat, dispatch }) {\n   const callerUsername = callerInChat?.username;\n\n   const acceptCall = () => {\n      dispatch({ type: STOP_RINGING });\n      dispatch({ type: ACCEPT_CALL });\n   };\n\n   return (\n      <div className=\"callnotify\">\n         <i className=\"fas fa-phone-volume callnotify__icon\"></i>\n         <h1 className=\"callnotify__name\">{callerUsername || '(Unknown)'}</h1>\n         <p className=\"callnotify__msg\">Incoming call</p>\n         <div className=\"callnotify__user-actions\">\n            <button\n               className=\"btn btn-md callnotify__user-action btn-red\"\n               onClick={() => dispatch({ type: STOP_RINGING })}\n            >\n               Decline\n            </button>\n            <button\n               className=\"btn btn-md callnotify__user-action btn-green\"\n               onClick={acceptCall}\n            >\n               Accept\n            </button>\n         </div>\n      </div>\n   );\n}\n\nconst mapStateToProps = createStructuredSelector({\n   rtcOffer: selectRtcOffer,\n   callerInChat: selectCallerInChat,\n   videocallRoomId: selectVideoChatRoomId\n});\n\nexport default connect(mapStateToProps)(IncomingCallNotify);\n","import React, { useEffect, useContext } from 'react';\r\nimport SidenavSearch from './Sidenav-search';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectCurrentUser } from '../../../redux/user/user.selectors';\r\nimport { selectIsRinging } from '../../../redux/videocall/videocall.selectors';\r\n\r\nimport { socketContext } from '../../../contexts/SocketProvider';\r\nimport { themeContext } from '../../../contexts/ThemeProvider';\r\n\r\nimport ChatList from './chatlist/ChatList';\r\nimport './Sidenav.scss';\r\nimport IncomingCallNotify from '../../IncomingCallNotify';\r\n\r\nfunction Sidenav({ currentUser, isRinging }) {\r\n   const { socket } = useContext(socketContext);\r\n   const { appTheme } = useContext(themeContext);\r\n   const darkTheme = appTheme === 'dark';\r\n\r\n   useEffect(() => {\r\n      socket.emit('join-self', currentUser._id);\r\n   }, []);\r\n   return (\r\n      <div className={`allchats ${darkTheme && 'd-theme'}`}>\r\n         <SidenavSearch />\r\n         <ChatList />\r\n         {isRinging && <IncomingCallNotify />}\r\n      </div>\r\n   );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n   currentUser: selectCurrentUser,\r\n   isRinging: selectIsRinging\r\n});\r\nexport default connect(mapStateToProps)(Sidenav);\r\n","import { v4 as uuidv4 } from 'uuid';\r\nimport { flashAlert } from '../redux/alert/alert.action.creators';\r\n\r\nexport const flashAlertsForEmptyFields = function (fieldsArr, dispatch) {\r\n   fieldsArr\r\n      .map(field => ({\r\n         text: `The \"${field}\" field cannot be empty`,\r\n         type: 'warning',\r\n         id: uuidv4()\r\n      }))\r\n      .forEach((alert, i) => dispatch(flashAlert(alert, 2000 * (i + 1))));\r\n};\r\n","import React, { useState, useContext } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUser } from '../../redux/user/user.selectors';\r\nimport { authenticate } from '../../redux/user/user.actions.creators';\r\nimport { themeContext } from '../../contexts/ThemeProvider';\r\nimport * as otherUtils from '../../utils/others';\r\nimport * as formUtils from '../../utils/forms';\r\nimport TextInput from '../formUI/TextInput';\r\nimport './Login-Signup.scss';\r\n\r\nfunction Signup({ user, dispatch }) {\r\n   const { appTheme } = useContext(themeContext);\r\n   const darkTheme = appTheme === 'dark';\r\n   const [signupData, setSignupData] = useState({\r\n      username: '',\r\n      password: '',\r\n      email: ''\r\n   });\r\n\r\n   const onChangeData = ev => {\r\n      const { name, value } = ev.target;\r\n      setSignupData({ ...signupData, [name]: value });\r\n   };\r\n\r\n   const handleSubmit = ev => {\r\n      ev.preventDefault();\r\n      const emptyFields = otherUtils.getEmptyFields(signupData);\r\n\r\n      if (emptyFields.length)\r\n         return formUtils.flashAlertsForEmptyFields(emptyFields, dispatch);\r\n      dispatch(authenticate('signup', signupData));\r\n   };\r\n\r\n   return user.isLoggedIn ? (\r\n      <Redirect to='/dashboard' />\r\n   ) : (\r\n      <form\r\n         className={`auth u-text-center ${darkTheme && 'd-theme'}`}\r\n         onSubmit={handleSubmit}\r\n      >\r\n         <h1 className='heading-primary auth__heading'>\r\n            Create your new account\r\n         </h1>\r\n         <div className='auth__formgroup'>\r\n            <TextInput\r\n               type='text'\r\n               className='auth__forminput textfield'\r\n               placeholder='Enter your username'\r\n               name='username'\r\n               value={signupData.username}\r\n               onChange={onChangeData}\r\n            />\r\n            <i className='fas fa-user auth__formgroup__icon'></i>\r\n         </div>\r\n         <div className='auth__formgroup'>\r\n            <TextInput\r\n               type='email'\r\n               className='auth__forminput textfield'\r\n               placeholder='Enter your email'\r\n               name='email'\r\n               value={signupData.email}\r\n               onChange={onChangeData}\r\n            />\r\n            <i className='fas fa-envelope auth__formgroup__icon'></i>\r\n         </div>\r\n         <div className='auth__formgroup'>\r\n            <TextInput\r\n               type='password'\r\n               className='auth__forminput textfield'\r\n               placeholder='Enter a password'\r\n               name='password'\r\n               value={signupData.password}\r\n               onChange={onChangeData}\r\n               autoComplete='off'\r\n            />\r\n            <i className='fas fa-lock auth__formgroup__icon'></i>\r\n         </div>\r\n         <div className='auth__formgroup'>\r\n            <button type='submit' className='btn btn--curved auth__submit'>\r\n               Create my new account\r\n            </button>\r\n         </div>\r\n         <p className='auth__switch-auth-page'>\r\n            Already have an account? <Link to='/login'>Log in</Link>\r\n         </p>\r\n      </form>\r\n   );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({ user: selectUser });\r\nexport default connect(mapStateToProps)(Signup);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as alertActions from '../../redux/alert/alert.action.creators';\r\n\r\nfunction Alert({ id, type, text, removeAlert }) {\r\n   return (\r\n      <div className={`alert alert--${type} alert--alignleft`}>\r\n         <p>{text}</p>\r\n         <span className=' alert__remove' onClick={() => removeAlert(id)}>\r\n            &times;\r\n         </span>\r\n      </div>\r\n   );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n   removeAlert: id => dispatch(alertActions.removeAlert(id))\r\n});\r\nexport default connect(null, mapDispatchToProps)(Alert);\r\n","import React from 'react';\r\nimport './Alerts.scss';\r\nimport Alert from './Alert';\r\n\r\nfunction Alerts({ alerts }) {\r\n   return (\r\n      <div className=\"alerts\">\r\n         {alerts.map(alert => (\r\n            <Alert key={alert.id} {...alert} />\r\n         ))}\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Alerts;\r\n","import React, { useState, useContext } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport Alerts from '../alerts/Alerts';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUser } from '../../redux/user/user.selectors';\r\nimport { selectAllAlerts } from '../../redux/alert/alert.selectors';\r\nimport { authenticate } from '../../redux/user/user.actions.creators';\r\n\r\nimport { themeContext } from '../../contexts/ThemeProvider';\r\nimport * as otherUtils from '../../utils/others';\r\n\r\nimport * as formUtils from '../../utils/forms';\r\nimport TextInput from '../formUI/TextInput';\r\nimport LoadingSpinner from '../UI/Loader';\r\nimport './Login-Signup.scss';\r\n\r\nfunction Login({ user, alerts, dispatch }) {\r\n   const [loginData, setLoginData] = useState({ username: '', password: '' });\r\n   const [showSpinner, setShowSpinner] = useState(false);\r\n   const { appTheme } = useContext(themeContext);\r\n   const darkTheme = appTheme === 'dark';\r\n\r\n   const onChangeData = ev => {\r\n      const { name, value } = ev.target;\r\n      setLoginData({ ...loginData, [name]: value });\r\n   };\r\n   const handleSubmit = ev => {\r\n      ev.preventDefault();\r\n      const emptyFields = otherUtils.getEmptyFields(loginData);\r\n\r\n      if (emptyFields.length)\r\n         return formUtils.flashAlertsForEmptyFields(emptyFields, dispatch);\r\n\r\n      dispatch(authenticate('login', loginData));\r\n   };\r\n   return user.isLoggedIn ? (\r\n      <Redirect to='/dashboard' />\r\n   ) : (\r\n      <>\r\n         <Alerts alerts={alerts} />\r\n         <form\r\n            action=''\r\n            className={`auth u-text-center ${darkTheme && 'd-theme'}`}\r\n            onSubmit={handleSubmit}\r\n         >\r\n            <h1 className='heading-primary auth__heading'>Log in</h1>\r\n            <div className='auth__formgroup'>\r\n               <TextInput\r\n                  type='text'\r\n                  className='auth__forminput textfield'\r\n                  placeholder='Enter your username'\r\n                  name='username'\r\n                  value={loginData.username}\r\n                  onChange={onChangeData}\r\n               />\r\n               <i className='fas fa-user auth__formgroup__icon'></i>\r\n            </div>\r\n            <div className='auth__formgroup'>\r\n               <TextInput\r\n                  type='password'\r\n                  className='auth__forminput textfield'\r\n                  placeholder='Enter your password'\r\n                  name='password'\r\n                  value={loginData.password}\r\n                  onChange={onChangeData}\r\n               />\r\n               <i className='fas fa-lock auth__formgroup__icon'></i>\r\n            </div>\r\n            <div className='auth__formgroup'>\r\n               <button type='submit' className='btn btn--curved auth__submit'>\r\n                  Log into my account\r\n               </button>\r\n            </div>\r\n\r\n            <p className='auth__switch-auth-page'>\r\n               Don't have an account?{' '}\r\n               <Link to='/signup'>Create a new account</Link>\r\n            </p>\r\n         </form>\r\n      </>\r\n   );\r\n}\r\nconst mapStateToProps = createStructuredSelector({\r\n   user: selectUser,\r\n   alerts: selectAllAlerts\r\n});\r\n\r\nexport default connect(mapStateToProps)(Login);\r\n","import React, { useState, createContext } from 'react';\r\n\r\nexport const videoCallContext = createContext();\r\n\r\nexport const VideoCallProvider = props => {\r\n   const [videoCallSession, setVideoCallSession] = useState({\r\n      roomId: null,\r\n      caller: null,\r\n      offer: null,\r\n      answer: null,\r\n      msgs: []\r\n   });\r\n   return (\r\n      <videoCallContext.Provider\r\n         value={{ session: videoCallSession, setSession: setVideoCallSession }}\r\n      >\r\n         {props.children}\r\n      </videoCallContext.Provider>\r\n   );\r\n};\r\n","import React from 'react';\nimport './ChatListInPrompt.scss';\n\nfunction ChatListInPrompt() {\n   return (\n      <ul className=\"user-chatlist remove-bullets\">\n         <li className=\"each-row\">\n            <input type=\"checkbox\" id=\"add-chat\" />\n            <label htmlFor=\"add-chat\">\n               <div className=\"chat\">\n                  <img\n                     src=\"img/face3.jpg\"\n                     alt=\"\"\n                     className=\"chat__photo pic pic--sm\"\n                  />\n                  <span className=\"chat__name\">Mary Branson</span>\n               </div>\n            </label>\n         </li>\n      </ul>\n   );\n}\n\nexport default ChatListInPrompt;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setIsAddingNewPeerToCall } from '../../redux/videocall/videocall.action.creators';\nimport ChatListInPrompt from './ChatListInPrompt';\nimport './AddToCallPrompt.scss';\n\nfunction AddToCallPrompt({ hidePrompt }) {\n   return (\n      <div className=\"modal add-attendee-modal slide-in-from-up-to-center\">\n         <h1 className=\"add-attendee-modal__header\">Add someone</h1>\n         <ChatListInPrompt />\n         <div className=\"add-attendee-modal__footer\">\n            <button className=\"btn btn-text-white\">Close</button>\n            <button className=\"btn btn-white\">Add</button>\n         </div>\n         <span className=\"add-attendee-modal__close\" onClick={hidePrompt}>\n            &times;\n         </span>\n      </div>\n   );\n}\nconst mapDispatchToProps = dispatch => ({\n   hidePrompt: () => dispatch(setIsAddingNewPeerToCall(false))\n});\nexport default connect(null, mapDispatchToProps)(AddToCallPrompt);\n","import React, { useContext } from 'react';\nimport { themeContext } from '../../../contexts/ThemeProvider';\nimport './ChatsAndAttendeesNav.scss';\n\nfunction ChatsAndAttendeesNav(props) {\n   const { appTheme } = useContext(themeContext);\n   const darkTheme = appTheme === 'dark';\n   const { isViewingAttendees, setIsViewingAttendees } = props;\n\n   return (\n      <div\n         className={`videocall__chats-and-attendees-nav ${\n            darkTheme && 'd-theme'\n         }`}\n      >\n         <span\n            className={`chats ${!isViewingAttendees && 'nav-item--active'}`}\n            data-nav-item=\"chat-msgs\"\n            onClick={() => setIsViewingAttendees(false)}\n         >\n            <i className=\"fas fa-comments\"></i>\n         </span>\n         {/* <div\n            className={`attendees ${isViewingAttendees && 'nav-item--active'}`}\n            data-nav-item=\"attendees\"\n            onClick={() => setIsViewingAttendees(true)}\n         >\n            <span className=\"total\">15</span>\n            <i className=\"fas fa-users\"></i>\n         </div> */}\n      </div>\n   );\n}\n\nexport default ChatsAndAttendeesNav;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from '../../../redux/user/user.selectors';\n\nimport './VideocallMsg.scss';\nimport '../../Textmsg.scss';\n\nfunction VideocallMsg({ msg, currentUser }) {\n   console.log('In VideocallMsg, ', msg.sender._id, currentUser);\n   const { text, sender } = msg;\n   const sentByMe = sender._id === currentUser._id;\n\n   return (\n      <div\n         className={`videocall-msg textmsg--${\n            sentByMe ? 'outgoing' : 'incoming'\n         }`}>\n         <img\n            src={`/img/users/${sender.photo}`}\n            alt=''\n            className='videocall-msg__sender-photo pic pic--xsm'\n         />\n         <div className='videocall-msg__sender-name'>\n            {sentByMe ? 'You' : sender.username}\n         </div>\n         <p className='videocall-msg__content'>{text}</p>\n      </div>\n   );\n}\n\nconst mapStateToProps = createStructuredSelector({\n   currentUser: selectCurrentUser\n});\n\nexport default connect(mapStateToProps)(VideocallMsg);\n","import React, { useState, useContext } from 'react';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectVideoChatRoomId } from '../../../redux/videocall/videocall.selectors';\nimport { selectCurrentUser } from '../../../redux/user/user.selectors';\nimport { ADD_VIDEOCALL_MSG } from '../../../redux/videocall/videocall.action.types';\n\nimport { socketContext } from '../../../contexts/SocketProvider';\nimport '../../Icon.scss';\nimport './NewMsgForm.scss';\nimport { themeContext } from '../../../contexts/ThemeProvider';\n\nfunction NewMsgForm({ currentUser, videoChatRoom, dispatch }) {\n   const { appTheme } = useContext(themeContext);\n   const darkTheme = appTheme === 'dark';\n   const { socket } = useContext(socketContext);\n   const [newTextMsg, setNewTextMsg] = useState('');\n\n   const handleChange = ev => setNewTextMsg(ev.target.value);\n\n   const sendNewMsg = function (ev) {\n      ev?.preventDefault();\n\n      const msg = {\n         text: newTextMsg,\n         sender: currentUser,\n         room: videoChatRoom\n      };\n      dispatch({ type: ADD_VIDEOCALL_MSG, payload: { msg } });\n      socket.emit('send-video-call-msg', msg);\n\n      setNewTextMsg('');\n   };\n\n   return (\n      <form\n         className={`newmsg ${darkTheme && 'd-theme'}`}\n         onSubmit={sendNewMsg}>\n         <input\n            type='text'\n            value={newTextMsg}\n            className='newmsg__input'\n            onChange={handleChange}\n            placeholder='Type a new message here'\n         />\n         <span\n            className='newmsg__send icon icon--sm icon--bg-blue'\n            onClick={sendNewMsg}>\n            <i className='fas fa-paper-plane'></i>\n         </span>\n      </form>\n   );\n}\nconst mapStateToProps = createStructuredSelector({\n   currentUser: selectCurrentUser,\n   videoChatRoom: selectVideoChatRoomId\n});\nexport default connect(mapStateToProps, null)(NewMsgForm);\n","import React, { useContext } from 'react';\nimport ReactScrollableFeed from 'react-scrollable-feed';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectVideoChatMsgs } from '../../../redux/videocall/videocall.selectors';\n\nimport { themeContext } from '../../../contexts/ThemeProvider';\nimport { v4 as uuidv4 } from 'uuid';\nimport VideocallMsg from './VideocallMsg';\nimport NewMsgForm from './NewMsgForm';\nimport './Msg-section.scss';\n\nfunction MsgSection({ videoChatMsgs }) {\n   const { appTheme } = useContext(themeContext);\n   const darkTheme = appTheme === 'dark';\n\n   return (\n      <div className={`videocall__chats ${darkTheme && 'd-theme'}`}>\n         <ReactScrollableFeed>\n            {videoChatMsgs.map(msg => (\n               <VideocallMsg key={uuidv4()} msg={msg} />\n            ))}\n         </ReactScrollableFeed>\n\n         <NewMsgForm />\n      </div>\n   );\n}\nconst mapStateToProps = createStructuredSelector({\n   videoChatMsgs: selectVideoChatMsgs\n});\nexport default connect(mapStateToProps)(MsgSection);\n","import React from 'react';\nimport './Attendees.scss';\n\nfunction Attendees() {\n   return (\n      <ul className=\"videocall__attendees remove-bullets\">\n         <li className=\"videocall__attendee\">\n            <div className=\"videocall__attendee__details\">\n               <img\n                  src=\"img/face2.jpg\"\n                  alt=\"\"\n                  className=\"videocall__attendee__pic pic pic--xsm\"\n               />\n               <span className=\"videocall__attendee__name\">Stella Brown</span>\n            </div>\n            <div className=\"host-actions\">\n               <button className=\"btn btn-md btn-primary\">Unmute</button>\n            </div>\n            <div className=\"videocall__attendee__status-in-call\">\n               <span className=\"is-muted\" data-label=\"Mute audio\">\n                  <i className=\"fas fa-microphone\"></i>\n               </span>\n               <span className=\"is-muted\" data-label=\"Stop video\">\n                  <i className=\"fas fa-video\"></i>\n               </span>\n            </div>\n         </li>\n      </ul>\n   );\n}\n\nexport default Attendees;\n","import React, { useState, useContext } from 'react';\n\nimport { themeContext } from '../../../contexts/ThemeProvider';\nimport ChatsAndAttendeesNav from './ChatsAndAttendeesNav';\nimport MsgSection from './Msg-section';\nimport Attendees from './Attendees';\nimport './ChatsAndAttendees.scss';\n\nfunction ChatsAndAttendees() {\n   const { appTheme } = useContext(themeContext);\n   const darkTheme = appTheme === 'dark';\n   const [isViewingAttendees, setIsViewingAttendees] = useState(false);\n\n   return (\n      <div\n         className={`videocall__chats-and-attendees ${darkTheme && 'd-theme'}`}\n      >\n         <h1 className=\"heading\">Group Chat</h1>\n         {isViewingAttendees ? <Attendees /> : <MsgSection />}\n\n         <ChatsAndAttendeesNav\n            isViewingAttendees={isViewingAttendees}\n            setIsViewingAttendees={setIsViewingAttendees}\n         />\n      </div>\n   );\n}\n\nexport default ChatsAndAttendees;\n","import React from 'react';\nimport './AllParticpantsInCall.scss';\n\nfunction AllParticpantsInCall(props) {\n   return (\n      <div className=\"videocall__call__allparticipants\">{props.children}</div>\n   );\n}\n\nexport default AllParticpantsInCall;\n","import React, { useState, useEffect, useContext, useRef } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectCurrentUser } from '../../../redux/user/user.selectors';\r\nimport {\r\n   selectCallEnded,\r\n   selectCaller,\r\n   selectCallingWho,\r\n   selectRtcCandidate,\r\n   selectRtcOffer,\r\n   selectVideoChatRoomId\r\n} from '../../../redux/videocall/videocall.selectors';\r\nimport {\r\n   CALL_CONNECTED,\r\n   CALL_DISCONNECTED,\r\n   END_CALL,\r\n   SET_RTC_ANSWER\r\n} from '../../../redux/videocall/videocall.action.types';\r\n\r\nimport { selectCallConnected } from '../../../redux/videocall/videocall.selectors';\r\n\r\nimport { socketContext } from '../../../contexts/SocketProvider';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport AllParticpantsInCall from './AllParticpantsInCall';\r\nimport './PeerToPeerCall.scss';\r\nimport './ParticpantInCall.scss';\r\n\r\nfunction PeerToPeerCall(props) {\r\n   // prettier-ignore\r\n   const { caller, callingWho, videoChatRoomId, currentUser, dispatch } = props;\r\n   console.log('caller, callingWho', caller, callingWho);\r\n   const { socket } = useContext(socketContext);\r\n   const localVideoRef = useRef();\r\n   const remoteVideoRef = useRef();\r\n   const [localStream, setLocalStream] = useState(null);\r\n   const [remoteStream, setRemoteStream] = useState(new MediaStream());\r\n\r\n   class PeerConnection {\r\n      _iceConfig = {\r\n         iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\r\n      };\r\n      constructor({ isInitiator, stream }) {\r\n         this.connection = new RTCPeerConnection(this._iceConfig);\r\n         this.isInitiator = isInitiator || false;\r\n         this.stream = stream;\r\n         this.isConnected = false;\r\n         this.init();\r\n      }\r\n\r\n      init() {\r\n         this.connectStreamToVideo();\r\n         this.addOwnTracks();\r\n\r\n         this.connection.onnegotiationneeded = this.handleNegotiationNeeded;\r\n         this.connection.onicecandidate = this.handleIceCandidate;\r\n         this.connection.ontrack = this.handleTrackEvent;\r\n         this.connection.onremovetrack = this.handleRemoveTrack;\r\n         this.connection.oniceconnectionstatechange = this.handleIceConnectionStateChange;\r\n         this.connection.onconnectionstatechange = this.handleConnectionStateChange;\r\n         this.connection.onicegatheringstatechange = this.handleIceGatheringStateChange;\r\n         this.connection.onsignalingstatechange = this.handleSignalingStateChange;\r\n      }\r\n\r\n      connectStreamToVideo = () => {\r\n         localVideoRef.current.srcObject = this.stream;\r\n      };\r\n\r\n      addOwnTracks = () => {\r\n         this.stream\r\n            .getTracks()\r\n            .forEach(track => this.connection.addTrack(track, this.stream));\r\n      };\r\n\r\n      handleNegotiationNeeded = async _ => {\r\n         try {\r\n            const offer = await this.connection.createOffer();\r\n            await this.connection.setLocalDescription(offer);\r\n            console.log('In handleNegotiationNeeded');\r\n            console.log(this.connection);\r\n\r\n            socket.emit('outgoing-videocall', {\r\n               caller: currentUser._id,\r\n               to: callingWho,\r\n               roomId: videoChatRoomId,\r\n               offer\r\n            });\r\n         } catch (err) {\r\n            console.log('Err in handleNegotiationNeeded');\r\n         }\r\n      };\r\n\r\n      handleIceCandidate = ev => {\r\n         if (!ev.candidate) return;\r\n         console.log('handleIceCandidate from server');\r\n         console.log(this.connection);\r\n\r\n         socket.emit('candidate-out', {\r\n            to: this.isInitiator ? callingWho : caller,\r\n            candidate: ev.candidate\r\n         });\r\n      };\r\n\r\n      handleIncomingCandidate = candidate => {\r\n         if (!candidate) return;\r\n         this.connection\r\n            .addIceCandidate(new RTCIceCandidate(candidate))\r\n            .catch(err => console.log(err));\r\n         console.log('Receiving incoming candidate');\r\n         console.log(this.connection);\r\n      };\r\n\r\n      handleIceConnectionStateChange = _ => {\r\n         switch (this.connection.iceConnectionState) {\r\n            case 'connected':\r\n               console.log('CONNECTED!');\r\n               break;\r\n\r\n            case 'disconnected':\r\n               dispatch({ type: CALL_DISCONNECTED });\r\n               break;\r\n\r\n            case 'closed':\r\n            case 'failed':\r\n               this.closeVideoCall();\r\n               break;\r\n         }\r\n      };\r\n\r\n      handleConnectionStateChange = _ => {\r\n         switch (this.connection.connectionState) {\r\n            case 'connected':\r\n               console.log('CONNECTED!!');\r\n               dispatch({ type: CALL_CONNECTED });\r\n               break;\r\n\r\n            case 'disconnected':\r\n               dispatch({ type: CALL_DISCONNECTED });\r\n               break;\r\n\r\n            case 'closed':\r\n               alert('Connection closed');\r\n         }\r\n      };\r\n\r\n      handleTrackEvent = ev => {\r\n         const [stream] = ev.streams;\r\n         setRemoteStream(stream);\r\n         remoteVideoRef.current.srcObject = stream;\r\n         console.log('Incoming track from remote peer');\r\n      };\r\n\r\n      handleRemoveTrack = ev => {};\r\n      handleIceGatheringStateChange = ev => {};\r\n      handleSignalingStateChange = ev => {};\r\n\r\n      handleCloseVideoCall = () => {\r\n         // if (this.connection) {\r\n         //    this.connection.onicecandidate = null;\r\n         //    this.connection.ontrack = null;\r\n         //    this.connection.onnegotiationneeded = null;\r\n         //    this.connection.onremovetrack = null;\r\n         //    this.connection.oniceconnectionstatechange = null;\r\n         //    this.connection.onicegatheringstatechange = null;\r\n         //    this.connection.onsignalingstatechange = null;\r\n         // }\r\n         // console.log(\r\n         //    'localVideoRef',\r\n         //    localVideoRef.current.srcObject,\r\n         //    'remoteVideoRef',\r\n         //    remoteVideoRef.current.srcObject\r\n         // );\r\n         // localVideoRef.current?.srcObject\r\n         //    .getTracks()\r\n         //    .forEach(track => track.stop());\r\n\r\n         // localVideoRef.current.srcObject = null;\r\n\r\n         // if (localVideoRef.current?.srcObject)\r\n         //    localVideoRef.current?.srcObject\r\n         //       .getTracks()\r\n         //       .forEach(track => track.stop());\r\n\r\n         // this.connection.close();\r\n         // this.connection = null;\r\n\r\n         dispatch({ type: END_CALL });\r\n      };\r\n   }\r\n\r\n   class PeerInitiator extends PeerConnection {\r\n      constructor(params) {\r\n         super(params);\r\n      }\r\n\r\n      handleCallAnswered = async answer => {\r\n         await this.connection.setRemoteDescription(\r\n            new RTCSessionDescription(answer)\r\n         );\r\n         dispatch({ type: SET_RTC_ANSWER, payload: { answer } });\r\n      };\r\n   }\r\n\r\n   class JoiningPeer extends PeerConnection {\r\n      constructor(params) {\r\n         super(params);\r\n      }\r\n\r\n      handleIncomingRtcOffer = async offer => {\r\n         await this.connection.setRemoteDescription(\r\n            new RTCSessionDescription(offer)\r\n         );\r\n      };\r\n\r\n      createRtcAnswer = async () => {\r\n         const answer = await this.connection.createAnswer();\r\n         await this.connection.setLocalDescription(answer);\r\n         socket.emit('answer-call', { to: caller, answer });\r\n      };\r\n   }\r\n\r\n   const getUserMediaStream = function getUserMedia() {\r\n      const getUserMedia = (\r\n         navigator.getUserMedia ||\r\n         navigator.webkitGetUserMedia ||\r\n         navigator.mozGetUserMedia ||\r\n         navigator.msGetUserMedia\r\n      ).bind(window.navigator);\r\n\r\n      return new Promise(function (resolve, reject) {\r\n         getUserMedia(\r\n            { audio: true, video: true },\r\n            stream => {\r\n               setLocalStream(stream);\r\n               resolve(stream);\r\n            },\r\n            err => reject(err)\r\n         );\r\n      });\r\n   };\r\n\r\n   const makeCall = async function () {\r\n      const stream = await getUserMediaStream();\r\n      const peerConn = new PeerInitiator({ isInitiator: true, stream });\r\n      console.log('At stage new', peerConn);\r\n\r\n      socket.on('candidate-in', peerConn.handleIncomingCandidate);\r\n      socket.on('call-answered', peerConn.handleCallAnswered);\r\n      socket.on('click-end-call-btn', peerConn.handleCloseVideoCall);\r\n      socket.on('user-left-call', peerConn.handleCloseVideoCall);\r\n   };\r\n\r\n   const joinCall = async function () {\r\n      const stream = await getUserMediaStream();\r\n      const peerConn = new JoiningPeer({ isInitiator: false, stream });\r\n      console.log('At stage new', peerConn);\r\n\r\n      socket.on('candidate-in', peerConn.handleIncomingCandidate);\r\n      socket.on('click-end-call-btn', peerConn.handleCloseVideoCall);\r\n      socket.on('user-left-call', peerConn.handleCloseVideoCall);\r\n\r\n      peerConn.handleIncomingRtcOffer(props.rtcOffer);\r\n      peerConn.createRtcAnswer();\r\n   };\r\n\r\n   useEffect(() => {\r\n      console.log('videoChatRoomId', videoChatRoomId);\r\n      socket.emit('join-video-chat-room', videoChatRoomId);\r\n      caller === currentUser._id ? makeCall() : joinCall();\r\n   }, []);\r\n   return (\r\n      <AllParticpantsInCall>\r\n         {!props.callConnected && (\r\n            <div className='videocall__call__is-ringing u-text-center u-full-width'>\r\n               <i className='fas fa-phone-volume callnotify__icon'></i>{' '}\r\n               Calling...\r\n            </div>\r\n         )}\r\n         <div className='videocall__participant videocall__participant--peer'>\r\n            {remoteStream && (\r\n               <video\r\n                  src=''\r\n                  autoPlay\r\n                  className='videocall__participant__video'\r\n                  ref={remoteVideoRef}></video>\r\n            )}\r\n         </div>\r\n\r\n         <div\r\n            className={`videocall__participant videocall__participant--user ${\r\n               props.callConnected\r\n                  ? 'videocall__participant--user-send-to-bottom-right'\r\n                  : 'videocall__participant--user-fullwidth'\r\n            }`}>\r\n            {localStream && (\r\n               <video\r\n                  src=''\r\n                  autoPlay\r\n                  muted\r\n                  className='videocall__participant__video'\r\n                  ref={localVideoRef}></video>\r\n            )}\r\n         </div>\r\n      </AllParticpantsInCall>\r\n   );\r\n}\r\nconst mapStateToProps = createStructuredSelector({\r\n   currentUser: selectCurrentUser,\r\n   caller: selectCaller,\r\n   callingWho: selectCallingWho,\r\n   videoChatRoomId: selectVideoChatRoomId,\r\n   rtcOffer: selectRtcOffer,\r\n   rtcCandidate: selectRtcCandidate,\r\n   callConnected: selectCallConnected,\r\n   callEnded: selectCallEnded\r\n});\r\nexport default connect(mapStateToProps)(PeerToPeerCall);\r\n","import React from 'react';\n\nimport { connect } from 'react-redux';\nimport { setIsAddingNewPeerToCall } from '../../../redux/videocall/videocall.action.creators';\n\nimport './CallOptions.scss';\n\nfunction CallOptions({ dispatch }) {\n   const displayAddToCallPrompt = () =>\n      dispatch(setIsAddingNewPeerToCall(true));\n   return (\n      <div\n         className='videocall__call__options'\n         onClick={displayAddToCallPrompt}>\n         {/* <span\n            className=\"videocall__call__option with-label with-label-at-top\"\n            data-label=\"Add new participant\"\n         >\n            <i className=\"fas fa-user-plus\"></i>\n         </span> */}\n      </div>\n   );\n}\n\n// const mapDispatchToProps = dispatch => ({\n\n// })\nexport default connect()(CallOptions);\n","import React, { useContext } from 'react';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from '../../../redux/user/user.selectors';\nimport { selectVideoChatRoomId } from '../../../redux/videocall/videocall.selectors';\nimport {\n   END_CALL,\n   RESET_VIDEOCALL_STATE\n} from '../../../redux/videocall/videocall.action.types';\nimport { socketContext } from '../../../contexts/SocketProvider';\nimport { themeContext } from '../../../contexts/ThemeProvider';\n\nimport { useToggle } from '../../../hooks/useToggle';\nimport './CallControls.scss';\n\nfunction CallControls({ videoChatRoom, currentUser, dispatch }) {\n   const { socket } = useContext(socketContext);\n   const { appTheme } = useContext(themeContext);\n   const darkTheme = appTheme === 'dark';\n\n   const [micOn, _, toggleMic] = useToggle(false);\n   const [videoOn, __, toggleVideo] = useToggle(true);\n   const [speakerOn, ___, toggleSpeaker] = useToggle(true);\n\n   const handleClickEndCall = () => {\n      socket.emit('click-end-call-btn', currentUser._id);\n      socket.emit('leave-call', videoChatRoom);\n      dispatch({ type: END_CALL });\n   };\n\n   return (\n      <div className={`videocall__call__controls ${darkTheme && 'd-theme'}`}>\n         {/* <span\n            className={`videocall__callcontrol with-label with-label-at-top videocall__callcontrol ${\n               !micOn && 'is-muted'\n            }`}\n            data-label={micOn ? 'Mute audio' : 'Unmute audio'}\n            onClick={toggleMic}\n         >\n            <i className=\"fas fa-microphone\"></i>\n         </span>\n         <span\n            className={`videocall__callcontrol with-label with-label-at-top ${\n               !videoOn && 'is-muted'\n            }`}\n            data-label={videoOn ? 'Stop video' : 'Start video'}\n            onClick={toggleVideo}\n         >\n            <i className=\"fas fa-video\"></i>\n         </span>\n         <span\n            className={`videocall__callcontrol with-label with-label-at-top ${\n               !speakerOn && 'is-muted'\n            }`}\n            data-label={speakerOn ? 'Mute speaker' : 'Unmute speaker'}\n            onClick={toggleSpeaker}\n         >\n            <i className=\"fas fa-volume-up\"></i>\n         </span> */}\n         <span\n            className='videocall__callcontrol with-label with-label-at-top'\n            data-label='End call'\n            onClick={handleClickEndCall}>\n            <i className='fas fa-phone' data-label='End call'></i>\n         </span>\n      </div>\n   );\n}\nconst mapStateToProps = createStructuredSelector({\n   videoChatRoom: selectVideoChatRoomId,\n   currentUser: selectCurrentUser\n});\nexport default connect(mapStateToProps)(CallControls);\n","import React, { useContext } from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { themeContext } from '../../../contexts/ThemeProvider';\nimport {\n   ZOOM_TO_FULLSCREEN,\n   EXIT_FULLSCREEN\n} from '../../../redux/videocall/videocall.action.types';\nimport { selectIsFullscreen } from '../../../redux/videocall/videocall.selectors';\n\nimport './CallMoreOptions.scss';\n\nfunction CallMoreOptions({ isFullscreen, dispatch }) {\n   const { appTheme, toggleTheme } = useContext(themeContext);\n   const darkTheme = appTheme === 'dark';\n\n   return (\n      <div className={`videocall__call__more-actions`}>\n         <input type='checkbox' id='more-actions' />\n         <label htmlFor='more-actions'>\n            <span>\n               <i className='fas fa-ellipsis-v'></i>\n            </span>\n            <ul\n               className={`videocall__call__options remove-bullets ${\n                  darkTheme && 'd-theme'\n               }`}>\n               <li\n                  className='videocall__call__option'\n                  onClick={\n                     isFullscreen\n                        ? () => dispatch({ type: EXIT_FULLSCREEN })\n                        : () => dispatch({ type: ZOOM_TO_FULLSCREEN })\n                  }>\n                  <i\n                     className={`fas fa-${\n                        isFullscreen ? 'compress' : 'expand'\n                     }-arrows-alt`}></i>\n                  <span>\n                     {isFullscreen ? 'Exit full screen' : 'Zoom to fullscreen'}\n                  </span>\n               </li>\n               <li className='videocall__call__option' onClick={toggleTheme}>\n                  <i className='fas fa-sun'></i>\n                  <span>Switch to {darkTheme ? 'light' : 'dark'} theme</span>\n               </li>\n            </ul>\n         </label>\n      </div>\n   );\n}\n\nconst mapStateToProps = createStructuredSelector({\n   isFullscreen: selectIsFullscreen\n});\nexport default connect(mapStateToProps)(CallMoreOptions);\n","import React from 'react';\n\nimport './CallFooter.scss';\nimport CallOptions from './CallOptions';\nimport CallControls from './CallControls';\nimport CallMoreOptions from './CallMoreOptions';\n\nfunction CallFooter() {\n   return (\n      <div className=\"videocall__call__footer\">\n         <CallOptions />\n         <CallControls />\n         <CallMoreOptions />\n      </div>\n   );\n}\n\nexport default CallFooter;\n","import React from 'react';\n\nimport PeerToPeerCall from './PeerToPeerCall';\nimport ConferenceCall from './Conference-call';\nimport CallFooter from './CallFooter';\nimport './Call-section.scss';\n\nfunction CallSection({ chatId }) {\n   return (\n      <div className=\"videocall__call videocall__call--peer-to-peer\">\n         <PeerToPeerCall chatId={chatId} />\n         {/* <ConferenceCall /> */}\n         <CallFooter />\n      </div>\n   );\n}\n\nexport default CallSection;\n","import React, { useEffect, useContext } from 'react';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport {\n   selectIsFullscreen,\n   selectIsOnVideoCall,\n   selectIsAddingToCall\n} from '../../redux/videocall/videocall.selectors';\nimport { ADD_VIDEOCALL_MSG } from '../../redux/videocall/videocall.action.types';\n\nimport { socketContext } from '../../contexts/SocketProvider';\nimport { themeContext } from '../../contexts/ThemeProvider';\nimport { videoCallContext } from '../../contexts/VideocallProvider';\nimport { VideoCallProvider } from '../../contexts/VideocallProvider';\n\nimport AddToCallPrompt from './AddToCallPrompt';\nimport ChatsAndAttendees from './chats-and-attendees/ChatsAndAttendees';\nimport CallSection from './call-section/Call-section';\nimport Overlay from '../UI/Overlay';\nimport './VideoCall.scss';\n\nfunction VideoCall({ chatId, dispatch, ...otherProps }) {\n   const { isOnVideoCall, isAddingToCall, isFullscreen } = otherProps;\n   const { appTheme } = useContext(themeContext);\n   const darkTheme = appTheme === 'dark';\n\n   return (\n      <VideoCallProvider>\n         <div\n            className={`videocall-modal ${\n               isOnVideoCall && 'videocall-modal--zoomed-into-view'\n            } ${isFullscreen && 'videocall-modal--fullscreen'} ${\n               darkTheme && 'd-theme'\n            }`}>\n            <ChatsAndAttendees />\n            <CallSection chatId={chatId} />\n            {/* {isAddingToCall && <AddToCallPrompt />} */}\n         </div>\n         <Overlay showIf={isOnVideoCall} />\n      </VideoCallProvider>\n   );\n}\nconst mapStateToProps = createStructuredSelector({\n   isOnVideoCall: selectIsOnVideoCall,\n   isFullscreen: selectIsFullscreen,\n   isAddingToCall: selectIsAddingToCall\n});\nexport default connect(mapStateToProps)(VideoCall);\n","import React, { useEffect } from 'react';\r\nimport { Redirect, Route, withRouter } from 'react-router-dom';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUser } from './redux/user/user.selectors';\r\nimport { selectAllAlerts } from './redux/alert/alert.selectors';\r\nimport {\r\n   selectCaller,\r\n   selectIsOnVideoCall\r\n} from './redux/videocall/videocall.selectors';\r\nimport { loadUser } from './redux/user/user.actions.creators';\r\nimport store from './redux/store';\r\n\r\nimport { SocketProvider } from './contexts/SocketProvider';\r\nimport ThemeProvider from './contexts/ThemeProvider';\r\n\r\nimport Navbar from './components/layout/navbar/Navbar';\r\nimport LandingPage from './components/pages/landing-page/Landing-page';\r\nimport ChattingSection from './components/layout/chat-section/Chatting-section';\r\nimport Sidenav from './components/layout/sidenav/Sidenav';\r\nimport Signup from './components/pages/Signup';\r\nimport Login from './components/pages/Login';\r\nimport Alerts from './components/alerts/Alerts';\r\nimport VideoCall from './components/videocall/VideoCall';\r\n\r\nimport './App.scss';\r\n\r\nfunction HelomiDefaultImg() {\r\n   return (\r\n      <div className='default-img'>\r\n         <img src={process.env.PUBLIC_URL + '/img/helomi-bg.JPG'} />\r\n      </div>\r\n   );\r\n}\r\n\r\nfunction App({ alerts, user, isOnVideoCall, dispatch }) {\r\n   useEffect(() => {\r\n      dispatch(loadUser());\r\n   }, []);\r\n   return (\r\n      <ThemeProvider>\r\n         <SocketProvider>\r\n            <Alerts alerts={alerts} />\r\n            <Navbar />\r\n            <Route exact path='/' component={LandingPage} />\r\n            <Route exact path='/login' component={Login} />\r\n            <Route exact path='/signup' component={Signup} />\r\n            <Route\r\n               path='/dashboard'\r\n               render={() =>\r\n                  user.isLoggedIn ? <Sidenav /> : <Redirect to='/login' />\r\n               }\r\n            />\r\n            <Route exact path='/dashboard' component={HelomiDefaultImg} />\r\n            <Route\r\n               exact\r\n               path='/dashboard/chats/:id'\r\n               render={routeProps =>\r\n                  user.isLoggedIn ? (\r\n                     <ChattingSection {...routeProps} />\r\n                  ) : (\r\n                     <Redirect to='/login' />\r\n                  )\r\n               }\r\n            />\r\n            {isOnVideoCall && <VideoCall />}\r\n         </SocketProvider>\r\n      </ThemeProvider>\r\n   );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n   alerts: selectAllAlerts,\r\n   user: selectUser,\r\n   isOnVideoCall: selectIsOnVideoCall,\r\n   caller: selectCaller\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps)(App));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport App from './App';\n\nReactDOM.render(\n   <Provider store={store}>\n      <BrowserRouter>\n         <App />\n      </BrowserRouter>\n   </Provider>,\n   document.getElementById('root')\n);\n"],"sourceRoot":""}